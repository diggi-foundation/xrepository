// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenutzteCodeliste genutzte codeliste
//
// swagger:model GenutzteCodeliste
type GenutzteCodeliste struct {

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty" xml:"codeliste.beschreibung,omitempty"`

	// kennung
	// Required: true
	Kennung *string `json:"kennung" xml:"codeliste.kennung"`

	// name kurz
	// Required: true
	NameKurz *string `json:"nameKurz" xml:"codeliste.nameKurz"`

	// name lang
	// Required: true
	NameLang *string `json:"nameLang" xml:"codeliste.nameLang"`
}

// Validate validates this genutzte codeliste
func (m *GenutzteCodeliste) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKennung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameKurz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLang(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenutzteCodeliste) validateKennung(formats strfmt.Registry) error {

	if err := validate.Required("kennung", "body", m.Kennung); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteCodeliste) validateNameKurz(formats strfmt.Registry) error {

	if err := validate.Required("nameKurz", "body", m.NameKurz); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteCodeliste) validateNameLang(formats strfmt.Registry) error {

	if err := validate.Required("nameLang", "body", m.NameLang); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this genutzte codeliste based on context it is used
func (m *GenutzteCodeliste) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GenutzteCodeliste) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenutzteCodeliste) UnmarshalBinary(b []byte) error {
	var res GenutzteCodeliste
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
