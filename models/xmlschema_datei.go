// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// XmlschemaDatei xmlschema datei
//
// swagger:model XmlschemaDatei
type XmlschemaDatei struct {

	// datei format
	DateiFormat string `json:"dateiFormat,omitempty" xml:"dateiFormat,omitempty"`

	// dateiname
	// Required: true
	Dateiname *string `json:"dateiname" xml:"dateiname"`

	// encoding
	Encoding string `json:"encoding,omitempty" xml:"encoding,omitempty"`

	// mime type
	MimeType string `json:"mimeType,omitempty" xml:"mimeType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// xrepository2 kennung
	Xrepository2Kennung string `json:"xrepository2Kennung,omitempty" xml:"xrepository2Kennung,omitempty"`

	// xsd namensraum
	XsdNamensraum string `json:"xsdNamensraum,omitempty" xml:"xsdNamensraum,omitempty"`

	// xsd version
	XsdVersion string `json:"xsdVersion,omitempty" xml:"xsdVersion,omitempty"`
}

// Validate validates this xmlschema datei
func (m *XmlschemaDatei) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateiname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *XmlschemaDatei) validateDateiname(formats strfmt.Registry) error {

	if err := validate.Required("dateiname", "body", m.Dateiname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this xmlschema datei based on context it is used
func (m *XmlschemaDatei) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *XmlschemaDatei) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *XmlschemaDatei) UnmarshalBinary(b []byte) error {
	var res XmlschemaDatei
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
