// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CodeStatusVerwendung code status verwendung
//
// swagger:model CodeStatusVerwendung
type CodeStatusVerwendung struct {

	// code
	// Required: true
	// Enum: [AKTUELL AUSGESONDERT VERALTET ZUR_AUSSONDERUNG]
	Code *string `json:"code" xml:"code"`
}

// Validate validates this code status verwendung
func (m *CodeStatusVerwendung) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var codeStatusVerwendungTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AKTUELL","AUSGESONDERT","VERALTET","ZUR_AUSSONDERUNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeStatusVerwendungTypeCodePropEnum = append(codeStatusVerwendungTypeCodePropEnum, v)
	}
}

const (

	// CodeStatusVerwendungCodeAKTUELL captures enum value "AKTUELL"
	CodeStatusVerwendungCodeAKTUELL string = "AKTUELL"

	// CodeStatusVerwendungCodeAUSGESONDERT captures enum value "AUSGESONDERT"
	CodeStatusVerwendungCodeAUSGESONDERT string = "AUSGESONDERT"

	// CodeStatusVerwendungCodeVERALTET captures enum value "VERALTET"
	CodeStatusVerwendungCodeVERALTET string = "VERALTET"

	// CodeStatusVerwendungCodeZURAUSSONDERUNG captures enum value "ZUR_AUSSONDERUNG"
	CodeStatusVerwendungCodeZURAUSSONDERUNG string = "ZUR_AUSSONDERUNG"
)

// prop value enum
func (m *CodeStatusVerwendung) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, codeStatusVerwendungTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CodeStatusVerwendung) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this code status verwendung based on context it is used
func (m *CodeStatusVerwendung) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CodeStatusVerwendung) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeStatusVerwendung) UnmarshalBinary(b []byte) error {
	var res CodeStatusVerwendung
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
