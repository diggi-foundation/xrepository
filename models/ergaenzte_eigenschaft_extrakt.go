// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErgaenzteEigenschaftExtrakt ergaenzte eigenschaft extrakt
//
// swagger:model ErgaenzteEigenschaftExtrakt
type ErgaenzteEigenschaftExtrakt struct {

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty" xml:"beschreibung,omitempty"`

	// genutzte codeliste kennung
	GenutzteCodelisteKennung string `json:"genutzteCodelisteKennung,omitempty" xml:"genutzteCodeliste.kennung,omitempty"`

	// genutzte version codeliste kennung
	GenutzteVersionCodelisteKennung string `json:"genutzteVersionCodelisteKennung,omitempty" xml:"genutzteVersionCodeliste.kennung,omitempty"`

	// multiplizitaet lower
	// Required: true
	MultiplizitaetLower *int64 `json:"multiplizitaetLower" xml:"multiplizitaetLower"`

	// multiplizitaet upper
	MultiplizitaetUpper int64 `json:"multiplizitaetUpper,omitempty" xml:"multiplizitaetUpper,omitempty"`

	// name technisch
	// Required: true
	NameTechnisch *string `json:"nameTechnisch" xml:"nameTechnisch"`

	// typ
	// Required: true
	Typ *KomplexerTypExtrakt `json:"typ" xml:"typ"`
}

// Validate validates this ergaenzte eigenschaft extrakt
func (m *ErgaenzteEigenschaftExtrakt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMultiplizitaetLower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameTechnisch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErgaenzteEigenschaftExtrakt) validateMultiplizitaetLower(formats strfmt.Registry) error {

	if err := validate.Required("multiplizitaetLower", "body", m.MultiplizitaetLower); err != nil {
		return err
	}

	return nil
}

func (m *ErgaenzteEigenschaftExtrakt) validateNameTechnisch(formats strfmt.Registry) error {

	if err := validate.Required("nameTechnisch", "body", m.NameTechnisch); err != nil {
		return err
	}

	return nil
}

func (m *ErgaenzteEigenschaftExtrakt) validateTyp(formats strfmt.Registry) error {

	if err := validate.Required("typ", "body", m.Typ); err != nil {
		return err
	}

	if m.Typ != nil {
		if err := m.Typ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typ")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ergaenzte eigenschaft extrakt based on the context it is used
func (m *ErgaenzteEigenschaftExtrakt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTyp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErgaenzteEigenschaftExtrakt) contextValidateTyp(ctx context.Context, formats strfmt.Registry) error {

	if m.Typ != nil {

		if err := m.Typ.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("typ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("typ")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErgaenzteEigenschaftExtrakt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErgaenzteEigenschaftExtrakt) UnmarshalBinary(b []byte) error {
	var res ErgaenzteEigenschaftExtrakt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
