// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpalteExtrakt spalte extrakt
//
// swagger:model SpalteExtrakt
type SpalteExtrakt struct {

	// code spalte
	CodeSpalte bool `json:"codeSpalte,omitempty" xml:"codeSpalte,omitempty"`

	// datentyp
	// Required: true
	Datentyp *string `json:"datentyp" xml:"datentyp"`

	// empfohlene code spalte
	EmpfohleneCodeSpalte bool `json:"empfohleneCodeSpalte,omitempty" xml:"empfohleneCodeSpalte,omitempty"`

	// spaltenname lang
	SpaltennameLang string `json:"spaltennameLang,omitempty" xml:"spaltennameLang,omitempty"`

	// spaltenname technisch
	// Required: true
	SpaltennameTechnisch *string `json:"spaltennameTechnisch" xml:"spaltennameTechnisch"`

	// sprache
	Sprache string `json:"sprache,omitempty" xml:"sprache,omitempty"`

	// verwendung
	// Required: true
	Verwendung *CodeCodelistenspalteVerwendung `json:"verwendung" xml:"verwendung"`
}

// Validate validates this spalte extrakt
func (m *SpalteExtrakt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatentyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpaltennameTechnisch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerwendung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpalteExtrakt) validateDatentyp(formats strfmt.Registry) error {

	if err := validate.Required("datentyp", "body", m.Datentyp); err != nil {
		return err
	}

	return nil
}

func (m *SpalteExtrakt) validateSpaltennameTechnisch(formats strfmt.Registry) error {

	if err := validate.Required("spaltennameTechnisch", "body", m.SpaltennameTechnisch); err != nil {
		return err
	}

	return nil
}

func (m *SpalteExtrakt) validateVerwendung(formats strfmt.Registry) error {

	if err := validate.Required("verwendung", "body", m.Verwendung); err != nil {
		return err
	}

	if m.Verwendung != nil {
		if err := m.Verwendung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verwendung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verwendung")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this spalte extrakt based on the context it is used
func (m *SpalteExtrakt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVerwendung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpalteExtrakt) contextValidateVerwendung(ctx context.Context, formats strfmt.Registry) error {

	if m.Verwendung != nil {

		if err := m.Verwendung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verwendung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verwendung")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpalteExtrakt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpalteExtrakt) UnmarshalBinary(b []byte) error {
	var res SpalteExtrakt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
