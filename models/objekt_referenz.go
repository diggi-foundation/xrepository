// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjektReferenz objekt referenz
//
// swagger:model ObjektReferenz
type ObjektReferenz struct {

	// kennung
	Kennung string `json:"kennung,omitempty"`

	// name kurz
	NameKurz string `json:"nameKurz,omitempty"`

	// name lang
	NameLang string `json:"nameLang,omitempty"`

	// status fassung
	// Enum: [ENDFASSUNG ENTWURF]
	StatusFassung string `json:"statusFassung,omitempty"`

	// status veroeffentlichung
	// Enum: [NICHT_VEROEFFENTLICHT VEROEFFENTLICHT]
	StatusVeroeffentlichung string `json:"statusVeroeffentlichung,omitempty"`

	// status verwendung
	// Enum: [AKTUELL AUSGESONDERT VERALTET ZUR_AUSSONDERUNG]
	StatusVerwendung string `json:"statusVerwendung,omitempty"`

	// status zertifizierung
	// Enum: [NICHT_ZERTIFIZIERT ZERTIFIZIERT ZERTIFIZIERUNG_BEANTRAGT]
	StatusZertifizierung string `json:"statusZertifizierung,omitempty"`

	// typ
	// Enum: [STANDARD DATEI CODELISTE VERSION_CODELISTE VERSION_STANDARD KERNKOMPONENTE VERSION_KERNKOMPONENTE NUTZER SEITE MAIL_TEMPLATE BILD REDAKTIONELLE_LISTE]
	Typ string `json:"typ,omitempty"`

	// zeitpunkt letzte bearbeitung
	// Format: date-time
	ZeitpunktLetzteBearbeitung strfmt.DateTime `json:"zeitpunktLetzteBearbeitung,omitempty"`
}

// Validate validates this objekt referenz
func (m *ObjektReferenz) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatusFassung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVeroeffentlichung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVerwendung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktLetzteBearbeitung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objektReferenzTypeStatusFassungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDFASSUNG","ENTWURF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objektReferenzTypeStatusFassungPropEnum = append(objektReferenzTypeStatusFassungPropEnum, v)
	}
}

const (

	// ObjektReferenzStatusFassungENDFASSUNG captures enum value "ENDFASSUNG"
	ObjektReferenzStatusFassungENDFASSUNG string = "ENDFASSUNG"

	// ObjektReferenzStatusFassungENTWURF captures enum value "ENTWURF"
	ObjektReferenzStatusFassungENTWURF string = "ENTWURF"
)

// prop value enum
func (m *ObjektReferenz) validateStatusFassungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objektReferenzTypeStatusFassungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjektReferenz) validateStatusFassung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFassung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusFassungEnum("statusFassung", "body", m.StatusFassung); err != nil {
		return err
	}

	return nil
}

var objektReferenzTypeStatusVeroeffentlichungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NICHT_VEROEFFENTLICHT","VEROEFFENTLICHT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objektReferenzTypeStatusVeroeffentlichungPropEnum = append(objektReferenzTypeStatusVeroeffentlichungPropEnum, v)
	}
}

const (

	// ObjektReferenzStatusVeroeffentlichungNICHTVEROEFFENTLICHT captures enum value "NICHT_VEROEFFENTLICHT"
	ObjektReferenzStatusVeroeffentlichungNICHTVEROEFFENTLICHT string = "NICHT_VEROEFFENTLICHT"

	// ObjektReferenzStatusVeroeffentlichungVEROEFFENTLICHT captures enum value "VEROEFFENTLICHT"
	ObjektReferenzStatusVeroeffentlichungVEROEFFENTLICHT string = "VEROEFFENTLICHT"
)

// prop value enum
func (m *ObjektReferenz) validateStatusVeroeffentlichungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objektReferenzTypeStatusVeroeffentlichungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjektReferenz) validateStatusVeroeffentlichung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusVeroeffentlichung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusVeroeffentlichungEnum("statusVeroeffentlichung", "body", m.StatusVeroeffentlichung); err != nil {
		return err
	}

	return nil
}

var objektReferenzTypeStatusVerwendungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AKTUELL","AUSGESONDERT","VERALTET","ZUR_AUSSONDERUNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objektReferenzTypeStatusVerwendungPropEnum = append(objektReferenzTypeStatusVerwendungPropEnum, v)
	}
}

const (

	// ObjektReferenzStatusVerwendungAKTUELL captures enum value "AKTUELL"
	ObjektReferenzStatusVerwendungAKTUELL string = "AKTUELL"

	// ObjektReferenzStatusVerwendungAUSGESONDERT captures enum value "AUSGESONDERT"
	ObjektReferenzStatusVerwendungAUSGESONDERT string = "AUSGESONDERT"

	// ObjektReferenzStatusVerwendungVERALTET captures enum value "VERALTET"
	ObjektReferenzStatusVerwendungVERALTET string = "VERALTET"

	// ObjektReferenzStatusVerwendungZURAUSSONDERUNG captures enum value "ZUR_AUSSONDERUNG"
	ObjektReferenzStatusVerwendungZURAUSSONDERUNG string = "ZUR_AUSSONDERUNG"
)

// prop value enum
func (m *ObjektReferenz) validateStatusVerwendungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objektReferenzTypeStatusVerwendungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjektReferenz) validateStatusVerwendung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusVerwendung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusVerwendungEnum("statusVerwendung", "body", m.StatusVerwendung); err != nil {
		return err
	}

	return nil
}

var objektReferenzTypeStatusZertifizierungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NICHT_ZERTIFIZIERT","ZERTIFIZIERT","ZERTIFIZIERUNG_BEANTRAGT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objektReferenzTypeStatusZertifizierungPropEnum = append(objektReferenzTypeStatusZertifizierungPropEnum, v)
	}
}

const (

	// ObjektReferenzStatusZertifizierungNICHTZERTIFIZIERT captures enum value "NICHT_ZERTIFIZIERT"
	ObjektReferenzStatusZertifizierungNICHTZERTIFIZIERT string = "NICHT_ZERTIFIZIERT"

	// ObjektReferenzStatusZertifizierungZERTIFIZIERT captures enum value "ZERTIFIZIERT"
	ObjektReferenzStatusZertifizierungZERTIFIZIERT string = "ZERTIFIZIERT"

	// ObjektReferenzStatusZertifizierungZERTIFIZIERUNGBEANTRAGT captures enum value "ZERTIFIZIERUNG_BEANTRAGT"
	ObjektReferenzStatusZertifizierungZERTIFIZIERUNGBEANTRAGT string = "ZERTIFIZIERUNG_BEANTRAGT"
)

// prop value enum
func (m *ObjektReferenz) validateStatusZertifizierungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objektReferenzTypeStatusZertifizierungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjektReferenz) validateStatusZertifizierung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusZertifizierung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusZertifizierungEnum("statusZertifizierung", "body", m.StatusZertifizierung); err != nil {
		return err
	}

	return nil
}

var objektReferenzTypeTypPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STANDARD","DATEI","CODELISTE","VERSION_CODELISTE","VERSION_STANDARD","KERNKOMPONENTE","VERSION_KERNKOMPONENTE","NUTZER","SEITE","MAIL_TEMPLATE","BILD","REDAKTIONELLE_LISTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objektReferenzTypeTypPropEnum = append(objektReferenzTypeTypPropEnum, v)
	}
}

const (

	// ObjektReferenzTypSTANDARD captures enum value "STANDARD"
	ObjektReferenzTypSTANDARD string = "STANDARD"

	// ObjektReferenzTypDATEI captures enum value "DATEI"
	ObjektReferenzTypDATEI string = "DATEI"

	// ObjektReferenzTypCODELISTE captures enum value "CODELISTE"
	ObjektReferenzTypCODELISTE string = "CODELISTE"

	// ObjektReferenzTypVERSIONCODELISTE captures enum value "VERSION_CODELISTE"
	ObjektReferenzTypVERSIONCODELISTE string = "VERSION_CODELISTE"

	// ObjektReferenzTypVERSIONSTANDARD captures enum value "VERSION_STANDARD"
	ObjektReferenzTypVERSIONSTANDARD string = "VERSION_STANDARD"

	// ObjektReferenzTypKERNKOMPONENTE captures enum value "KERNKOMPONENTE"
	ObjektReferenzTypKERNKOMPONENTE string = "KERNKOMPONENTE"

	// ObjektReferenzTypVERSIONKERNKOMPONENTE captures enum value "VERSION_KERNKOMPONENTE"
	ObjektReferenzTypVERSIONKERNKOMPONENTE string = "VERSION_KERNKOMPONENTE"

	// ObjektReferenzTypNUTZER captures enum value "NUTZER"
	ObjektReferenzTypNUTZER string = "NUTZER"

	// ObjektReferenzTypSEITE captures enum value "SEITE"
	ObjektReferenzTypSEITE string = "SEITE"

	// ObjektReferenzTypMAILTEMPLATE captures enum value "MAIL_TEMPLATE"
	ObjektReferenzTypMAILTEMPLATE string = "MAIL_TEMPLATE"

	// ObjektReferenzTypBILD captures enum value "BILD"
	ObjektReferenzTypBILD string = "BILD"

	// ObjektReferenzTypREDAKTIONELLELISTE captures enum value "REDAKTIONELLE_LISTE"
	ObjektReferenzTypREDAKTIONELLELISTE string = "REDAKTIONELLE_LISTE"
)

// prop value enum
func (m *ObjektReferenz) validateTypEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objektReferenzTypeTypPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjektReferenz) validateTyp(formats strfmt.Registry) error {
	if swag.IsZero(m.Typ) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypEnum("typ", "body", m.Typ); err != nil {
		return err
	}

	return nil
}

func (m *ObjektReferenz) validateZeitpunktLetzteBearbeitung(formats strfmt.Registry) error {
	if swag.IsZero(m.ZeitpunktLetzteBearbeitung) { // not required
		return nil
	}

	if err := validate.FormatOf("zeitpunktLetzteBearbeitung", "body", "date-time", m.ZeitpunktLetzteBearbeitung.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this objekt referenz based on context it is used
func (m *ObjektReferenz) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjektReferenz) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjektReferenz) UnmarshalBinary(b []byte) error {
	var res ObjektReferenz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
