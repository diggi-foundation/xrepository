// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenutzteVersionCodeliste genutzte version codeliste
//
// swagger:model GenutzteVersionCodeliste
type GenutzteVersionCodeliste struct {

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty" xml:"versionCodeliste.beschreibung,omitempty"`

	// codeliste beschreibung
	CodelisteBeschreibung string `json:"codelisteBeschreibung,omitempty" xml:"codeliste.beschreibung,omitempty"`

	// kennung
	Kennung string `json:"kennung,omitempty"`

	// kennung inhalt
	// Required: true
	KennungInhalt *string `json:"kennungInhalt" xml:"codeliste.kennung"`

	// name kurz
	// Required: true
	NameKurz *string `json:"nameKurz" xml:"codeliste.nameKurz"`

	// name lang
	// Required: true
	NameLang *string `json:"nameLang" xml:"codeliste.nameLang"`

	// version
	// Required: true
	Version *string `json:"version" xml:"versionCodeliste.version"`
}

// Validate validates this genutzte version codeliste
func (m *GenutzteVersionCodeliste) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKennungInhalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameKurz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLang(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenutzteVersionCodeliste) validateKennungInhalt(formats strfmt.Registry) error {

	if err := validate.Required("kennungInhalt", "body", m.KennungInhalt); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteVersionCodeliste) validateNameKurz(formats strfmt.Registry) error {

	if err := validate.Required("nameKurz", "body", m.NameKurz); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteVersionCodeliste) validateNameLang(formats strfmt.Registry) error {

	if err := validate.Required("nameLang", "body", m.NameLang); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteVersionCodeliste) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this genutzte version codeliste based on context it is used
func (m *GenutzteVersionCodeliste) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GenutzteVersionCodeliste) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenutzteVersionCodeliste) UnmarshalBinary(b []byte) error {
	var res GenutzteVersionCodeliste
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
