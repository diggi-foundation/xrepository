// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CodeDokumentenkategorie code dokumentenkategorie
//
// swagger:model CodeDokumentenkategorie
type CodeDokumentenkategorie struct {

	// code
	// Required: true
	// Enum: [FACHMODELL_PROPRIETAER HANDLUNGSANWEISUNG PFLEGEKONZEPT SPEZIFIKATION WEITERE_DOKUMENTATION WEITERER_TECHNISCHER_BESTANDTEIL WSDL XOEV_BEANTRAGUNG XOEV_ZERTIFIZIERUNG]
	Code *string `json:"code" xml:"code"`
}

// Validate validates this code dokumentenkategorie
func (m *CodeDokumentenkategorie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var codeDokumentenkategorieTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FACHMODELL_PROPRIETAER","HANDLUNGSANWEISUNG","PFLEGEKONZEPT","SPEZIFIKATION","WEITERE_DOKUMENTATION","WEITERER_TECHNISCHER_BESTANDTEIL","WSDL","XOEV_BEANTRAGUNG","XOEV_ZERTIFIZIERUNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeDokumentenkategorieTypeCodePropEnum = append(codeDokumentenkategorieTypeCodePropEnum, v)
	}
}

const (

	// CodeDokumentenkategorieCodeFACHMODELLPROPRIETAER captures enum value "FACHMODELL_PROPRIETAER"
	CodeDokumentenkategorieCodeFACHMODELLPROPRIETAER string = "FACHMODELL_PROPRIETAER"

	// CodeDokumentenkategorieCodeHANDLUNGSANWEISUNG captures enum value "HANDLUNGSANWEISUNG"
	CodeDokumentenkategorieCodeHANDLUNGSANWEISUNG string = "HANDLUNGSANWEISUNG"

	// CodeDokumentenkategorieCodePFLEGEKONZEPT captures enum value "PFLEGEKONZEPT"
	CodeDokumentenkategorieCodePFLEGEKONZEPT string = "PFLEGEKONZEPT"

	// CodeDokumentenkategorieCodeSPEZIFIKATION captures enum value "SPEZIFIKATION"
	CodeDokumentenkategorieCodeSPEZIFIKATION string = "SPEZIFIKATION"

	// CodeDokumentenkategorieCodeWEITEREDOKUMENTATION captures enum value "WEITERE_DOKUMENTATION"
	CodeDokumentenkategorieCodeWEITEREDOKUMENTATION string = "WEITERE_DOKUMENTATION"

	// CodeDokumentenkategorieCodeWEITERERTECHNISCHERBESTANDTEIL captures enum value "WEITERER_TECHNISCHER_BESTANDTEIL"
	CodeDokumentenkategorieCodeWEITERERTECHNISCHERBESTANDTEIL string = "WEITERER_TECHNISCHER_BESTANDTEIL"

	// CodeDokumentenkategorieCodeWSDL captures enum value "WSDL"
	CodeDokumentenkategorieCodeWSDL string = "WSDL"

	// CodeDokumentenkategorieCodeXOEVBEANTRAGUNG captures enum value "XOEV_BEANTRAGUNG"
	CodeDokumentenkategorieCodeXOEVBEANTRAGUNG string = "XOEV_BEANTRAGUNG"

	// CodeDokumentenkategorieCodeXOEVZERTIFIZIERUNG captures enum value "XOEV_ZERTIFIZIERUNG"
	CodeDokumentenkategorieCodeXOEVZERTIFIZIERUNG string = "XOEV_ZERTIFIZIERUNG"
)

// prop value enum
func (m *CodeDokumentenkategorie) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, codeDokumentenkategorieTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CodeDokumentenkategorie) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this code dokumentenkategorie based on context it is used
func (m *CodeDokumentenkategorie) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CodeDokumentenkategorie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeDokumentenkategorie) UnmarshalBinary(b []byte) error {
	var res CodeDokumentenkategorie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
