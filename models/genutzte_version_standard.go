// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenutzteVersionStandard genutzte version standard
//
// swagger:model GenutzteVersionStandard
type GenutzteVersionStandard struct {

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty" xml:"versionStandard.beschreibung,omitempty"`

	// kennung
	Kennung string `json:"kennung,omitempty"`

	// kennung inhalt
	// Required: true
	KennungInhalt *string `json:"kennungInhalt" xml:"standard.kennung"`

	// name kurz
	NameKurz string `json:"nameKurz,omitempty" xml:"standard.nameKurz,omitempty"`

	// name lang
	NameLang string `json:"nameLang,omitempty" xml:"standard.nameLang,omitempty"`

	// version
	// Required: true
	Version *string `json:"version" xml:"versionStandard.version"`
}

// Validate validates this genutzte version standard
func (m *GenutzteVersionStandard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKennungInhalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenutzteVersionStandard) validateKennungInhalt(formats strfmt.Registry) error {

	if err := validate.Required("kennungInhalt", "body", m.KennungInhalt); err != nil {
		return err
	}

	return nil
}

func (m *GenutzteVersionStandard) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this genutzte version standard based on context it is used
func (m *GenutzteVersionStandard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GenutzteVersionStandard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenutzteVersionStandard) UnmarshalBinary(b []byte) error {
	var res GenutzteVersionStandard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
