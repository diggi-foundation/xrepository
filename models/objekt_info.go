// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjektInfo objekt info
//
// swagger:model ObjektInfo
type ObjektInfo struct {

	// binary
	Binary bool `json:"binary,omitempty" xml:"binary,attr,omitempty"`

	// inverse
	Inverse []*ReferenzInfo `json:"inverse" xml:"inverse"`

	// inverse kennung
	InverseKennung []string `json:"inverseKennung" xml:"inverseKennung"`

	// kennung
	Kennung string `json:"kennung,omitempty" xml:"kennung,attr,omitempty"`

	// owner
	// Required: true
	Owner *string `json:"owner" xml:"owner"`

	// referenz
	Referenz []*ReferenzInfo `json:"referenz" xml:"referenz"`

	// referenz kennung
	ReferenzKennung []string `json:"referenzKennung" xml:"referenzKennung"`

	// status
	Status string `json:"status,omitempty" xml:"status,attr,omitempty"`

	// type
	Type string `json:"type,omitempty" xml:"type,attr,omitempty"`
}

// Validate validates this objekt info
func (m *ObjektInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInverse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenz(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjektInfo) validateInverse(formats strfmt.Registry) error {
	if swag.IsZero(m.Inverse) { // not required
		return nil
	}

	for i := 0; i < len(m.Inverse); i++ {
		if swag.IsZero(m.Inverse[i]) { // not required
			continue
		}

		if m.Inverse[i] != nil {
			if err := m.Inverse[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inverse" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inverse" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjektInfo) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *ObjektInfo) validateReferenz(formats strfmt.Registry) error {
	if swag.IsZero(m.Referenz) { // not required
		return nil
	}

	for i := 0; i < len(m.Referenz); i++ {
		if swag.IsZero(m.Referenz[i]) { // not required
			continue
		}

		if m.Referenz[i] != nil {
			if err := m.Referenz[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referenz" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referenz" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this objekt info based on the context it is used
func (m *ObjektInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInverse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferenz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjektInfo) contextValidateInverse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Inverse); i++ {

		if m.Inverse[i] != nil {

			if swag.IsZero(m.Inverse[i]) { // not required
				return nil
			}

			if err := m.Inverse[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inverse" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inverse" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjektInfo) contextValidateReferenz(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Referenz); i++ {

		if m.Referenz[i] != nil {

			if swag.IsZero(m.Referenz[i]) { // not required
				return nil
			}

			if err := m.Referenz[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referenz" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referenz" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjektInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjektInfo) UnmarshalBinary(b []byte) error {
	var res ObjektInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
