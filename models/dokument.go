// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dokument dokument
//
// swagger:model Dokument
type Dokument struct {

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty" xml:"beschreibung,omitempty"`

	// datei
	// Required: true
	Datei []*Datei `json:"datei" xml:"datei"`

	// dokumentenkategorie
	// Required: true
	Dokumentenkategorie *CodeDokumentenkategorie `json:"dokumentenkategorie" xml:"dokumentenkategorie"`

	// name
	Name string `json:"name,omitempty" xml:"name,omitempty"`

	// zeitpunkt letzte bearbeitung
	// Format: date-time
	ZeitpunktLetzteBearbeitung strfmt.DateTime `json:"zeitpunktLetzteBearbeitung,omitempty" xml:"zeitpunktLetzteBearbeitung,omitempty"`
}

// Validate validates this dokument
func (m *Dokument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatei(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDokumentenkategorie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktLetzteBearbeitung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dokument) validateDatei(formats strfmt.Registry) error {

	if err := validate.Required("datei", "body", m.Datei); err != nil {
		return err
	}

	for i := 0; i < len(m.Datei); i++ {
		if swag.IsZero(m.Datei[i]) { // not required
			continue
		}

		if m.Datei[i] != nil {
			if err := m.Datei[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datei" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datei" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dokument) validateDokumentenkategorie(formats strfmt.Registry) error {

	if err := validate.Required("dokumentenkategorie", "body", m.Dokumentenkategorie); err != nil {
		return err
	}

	if m.Dokumentenkategorie != nil {
		if err := m.Dokumentenkategorie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dokumentenkategorie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dokumentenkategorie")
			}
			return err
		}
	}

	return nil
}

func (m *Dokument) validateZeitpunktLetzteBearbeitung(formats strfmt.Registry) error {
	if swag.IsZero(m.ZeitpunktLetzteBearbeitung) { // not required
		return nil
	}

	if err := validate.FormatOf("zeitpunktLetzteBearbeitung", "body", "date-time", m.ZeitpunktLetzteBearbeitung.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dokument based on the context it is used
func (m *Dokument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatei(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDokumentenkategorie(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dokument) contextValidateDatei(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datei); i++ {

		if m.Datei[i] != nil {

			if swag.IsZero(m.Datei[i]) { // not required
				return nil
			}

			if err := m.Datei[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datei" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datei" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dokument) contextValidateDokumentenkategorie(ctx context.Context, formats strfmt.Registry) error {

	if m.Dokumentenkategorie != nil {

		if err := m.Dokumentenkategorie.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dokumentenkategorie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dokumentenkategorie")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dokument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dokument) UnmarshalBinary(b []byte) error {
	var res Dokument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
