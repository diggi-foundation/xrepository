// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationData registration data
//
// swagger:model RegistrationData
type RegistrationData struct {

	// anzeigename
	Anzeigename string `json:"anzeigename,omitempty"`

	// confirmed password
	// Required: true
	ConfirmedPassword *string `json:"confirmedPassword"`

	// email
	// Required: true
	Email *string `json:"email"`

	// kennung
	Kennung string `json:"kennung,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// nutzerbeschreibung
	Nutzerbeschreibung string `json:"nutzerbeschreibung,omitempty"`

	// organisation
	// Required: true
	Organisation *string `json:"organisation"`

	// password
	// Required: true
	Password *string `json:"password"`

	// status fassung
	// Enum: [ENDFASSUNG ENTWURF]
	StatusFassung string `json:"statusFassung,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`

	// vorname
	// Required: true
	Vorname *string `json:"vorname"`
}

// Validate validates this registration data
func (m *RegistrationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmedPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusFassung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVorname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationData) validateConfirmedPassword(formats strfmt.Registry) error {

	if err := validate.Required("confirmedPassword", "body", m.ConfirmedPassword); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validateOrganisation(formats strfmt.Registry) error {

	if err := validate.Required("organisation", "body", m.Organisation); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

var registrationDataTypeStatusFassungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDFASSUNG","ENTWURF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registrationDataTypeStatusFassungPropEnum = append(registrationDataTypeStatusFassungPropEnum, v)
	}
}

const (

	// RegistrationDataStatusFassungENDFASSUNG captures enum value "ENDFASSUNG"
	RegistrationDataStatusFassungENDFASSUNG string = "ENDFASSUNG"

	// RegistrationDataStatusFassungENTWURF captures enum value "ENTWURF"
	RegistrationDataStatusFassungENTWURF string = "ENTWURF"
)

// prop value enum
func (m *RegistrationData) validateStatusFassungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registrationDataTypeStatusFassungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegistrationData) validateStatusFassung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFassung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusFassungEnum("statusFassung", "body", m.StatusFassung); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationData) validateVorname(formats strfmt.Registry) error {

	if err := validate.Required("vorname", "body", m.Vorname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this registration data based on context it is used
func (m *RegistrationData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationData) UnmarshalBinary(b []byte) error {
	var res RegistrationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
