// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NutzerData nutzer data
//
// swagger:model NutzerData
type NutzerData struct {

	// abos
	Abos []*ObjektReferenz `json:"abos"`

	// anzeigename
	Anzeigename string `json:"anzeigename,omitempty"`

	// api token
	APIToken []*APITokenData `json:"apiToken"`

	// beschreibung
	Beschreibung string `json:"beschreibung,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// inhalte
	Inhalte []*ObjektReferenz `json:"inhalte"`

	// kennung
	Kennung string `json:"kennung,omitempty"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organisation
	Organisation string `json:"organisation,omitempty"`

	// registriert seit
	// Format: date-time
	RegistriertSeit strfmt.DateTime `json:"registriertSeit,omitempty"`

	// rolle
	// Enum: [ADMIN USER ANONYM GUTACHTER]
	Rolle string `json:"rolle,omitempty"`

	// status
	// Enum: [CREATED WAITING_FOR_ACTIVATION ACTIVE SUSPENDED PASSWORD_RESET]
	Status string `json:"status,omitempty"`

	// status fassung
	// Enum: [ENDFASSUNG ENTWURF]
	StatusFassung string `json:"statusFassung,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// versionen
	Versionen []*ObjektReferenz `json:"versionen"`

	// vorname
	Vorname string `json:"vorname,omitempty"`
}

// Validate validates this nutzer data
func (m *NutzerData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInhalte(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistriertSeit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusFassung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NutzerData) validateAbos(formats strfmt.Registry) error {
	if swag.IsZero(m.Abos) { // not required
		return nil
	}

	for i := 0; i < len(m.Abos); i++ {
		if swag.IsZero(m.Abos[i]) { // not required
			continue
		}

		if m.Abos[i] != nil {
			if err := m.Abos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) validateAPIToken(formats strfmt.Registry) error {
	if swag.IsZero(m.APIToken) { // not required
		return nil
	}

	for i := 0; i < len(m.APIToken); i++ {
		if swag.IsZero(m.APIToken[i]) { // not required
			continue
		}

		if m.APIToken[i] != nil {
			if err := m.APIToken[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apiToken" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apiToken" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) validateInhalte(formats strfmt.Registry) error {
	if swag.IsZero(m.Inhalte) { // not required
		return nil
	}

	for i := 0; i < len(m.Inhalte); i++ {
		if swag.IsZero(m.Inhalte[i]) { // not required
			continue
		}

		if m.Inhalte[i] != nil {
			if err := m.Inhalte[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inhalte" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inhalte" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) validateRegistriertSeit(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistriertSeit) { // not required
		return nil
	}

	if err := validate.FormatOf("registriertSeit", "body", "date-time", m.RegistriertSeit.String(), formats); err != nil {
		return err
	}

	return nil
}

var nutzerDataTypeRollePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMIN","USER","ANONYM","GUTACHTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nutzerDataTypeRollePropEnum = append(nutzerDataTypeRollePropEnum, v)
	}
}

const (

	// NutzerDataRolleADMIN captures enum value "ADMIN"
	NutzerDataRolleADMIN string = "ADMIN"

	// NutzerDataRolleUSER captures enum value "USER"
	NutzerDataRolleUSER string = "USER"

	// NutzerDataRolleANONYM captures enum value "ANONYM"
	NutzerDataRolleANONYM string = "ANONYM"

	// NutzerDataRolleGUTACHTER captures enum value "GUTACHTER"
	NutzerDataRolleGUTACHTER string = "GUTACHTER"
)

// prop value enum
func (m *NutzerData) validateRolleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nutzerDataTypeRollePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NutzerData) validateRolle(formats strfmt.Registry) error {
	if swag.IsZero(m.Rolle) { // not required
		return nil
	}

	// value enum
	if err := m.validateRolleEnum("rolle", "body", m.Rolle); err != nil {
		return err
	}

	return nil
}

var nutzerDataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","WAITING_FOR_ACTIVATION","ACTIVE","SUSPENDED","PASSWORD_RESET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nutzerDataTypeStatusPropEnum = append(nutzerDataTypeStatusPropEnum, v)
	}
}

const (

	// NutzerDataStatusCREATED captures enum value "CREATED"
	NutzerDataStatusCREATED string = "CREATED"

	// NutzerDataStatusWAITINGFORACTIVATION captures enum value "WAITING_FOR_ACTIVATION"
	NutzerDataStatusWAITINGFORACTIVATION string = "WAITING_FOR_ACTIVATION"

	// NutzerDataStatusACTIVE captures enum value "ACTIVE"
	NutzerDataStatusACTIVE string = "ACTIVE"

	// NutzerDataStatusSUSPENDED captures enum value "SUSPENDED"
	NutzerDataStatusSUSPENDED string = "SUSPENDED"

	// NutzerDataStatusPASSWORDRESET captures enum value "PASSWORD_RESET"
	NutzerDataStatusPASSWORDRESET string = "PASSWORD_RESET"
)

// prop value enum
func (m *NutzerData) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nutzerDataTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NutzerData) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var nutzerDataTypeStatusFassungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDFASSUNG","ENTWURF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nutzerDataTypeStatusFassungPropEnum = append(nutzerDataTypeStatusFassungPropEnum, v)
	}
}

const (

	// NutzerDataStatusFassungENDFASSUNG captures enum value "ENDFASSUNG"
	NutzerDataStatusFassungENDFASSUNG string = "ENDFASSUNG"

	// NutzerDataStatusFassungENTWURF captures enum value "ENTWURF"
	NutzerDataStatusFassungENTWURF string = "ENTWURF"
)

// prop value enum
func (m *NutzerData) validateStatusFassungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nutzerDataTypeStatusFassungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NutzerData) validateStatusFassung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFassung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusFassungEnum("statusFassung", "body", m.StatusFassung); err != nil {
		return err
	}

	return nil
}

func (m *NutzerData) validateVersionen(formats strfmt.Registry) error {
	if swag.IsZero(m.Versionen) { // not required
		return nil
	}

	for i := 0; i < len(m.Versionen); i++ {
		if swag.IsZero(m.Versionen[i]) { // not required
			continue
		}

		if m.Versionen[i] != nil {
			if err := m.Versionen[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionen" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionen" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this nutzer data based on the context it is used
func (m *NutzerData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInhalte(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NutzerData) contextValidateAbos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Abos); i++ {

		if m.Abos[i] != nil {

			if swag.IsZero(m.Abos[i]) { // not required
				return nil
			}

			if err := m.Abos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) contextValidateAPIToken(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.APIToken); i++ {

		if m.APIToken[i] != nil {

			if swag.IsZero(m.APIToken[i]) { // not required
				return nil
			}

			if err := m.APIToken[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apiToken" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apiToken" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) contextValidateInhalte(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Inhalte); i++ {

		if m.Inhalte[i] != nil {

			if swag.IsZero(m.Inhalte[i]) { // not required
				return nil
			}

			if err := m.Inhalte[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inhalte" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inhalte" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NutzerData) contextValidateVersionen(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Versionen); i++ {

		if m.Versionen[i] != nil {

			if swag.IsZero(m.Versionen[i]) { // not required
				return nil
			}

			if err := m.Versionen[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionen" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionen" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NutzerData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NutzerData) UnmarshalBinary(b []byte) error {
	var res NutzerData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
