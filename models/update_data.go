// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateData update data
//
// swagger:model UpdateData
type UpdateData struct {

	// aktualisierungszyklus
	// Enum: [KEINE_AKTUALISIERUNGSZUSICHERUNG REGELMAESSIGE_AKTUALISIERUNG UNREGELMAESSIGE_AKTUALISIERUNG]
	Aktualisierungszyklus string `json:"aktualisierungszyklus,omitempty"`

	// ansprechpartner
	Ansprechpartner []*AnsprechpartnerData `json:"ansprechpartner"`

	// bezugsort
	Bezugsort []string `json:"bezugsort"`

	// datum gueltigkeit ab
	// Format: date-time
	DatumGueltigkeitAb strfmt.DateTime `json:"datumGueltigkeitAb,omitempty"`

	// datum gueltigkeit bis
	// Format: date-time
	DatumGueltigkeitBis strfmt.DateTime `json:"datumGueltigkeitBis,omitempty"`

	// externe website
	ExterneWebsite string `json:"externeWebsite,omitempty"`

	// herausgebername kurz
	HerausgebernameKurz []*StringLatinMehrsprachig `json:"herausgebernameKurz"`

	// herausgebername lang
	HerausgebernameLang []*StringLatinMehrsprachig `json:"herausgebernameLang"`

	// lizenz
	Lizenz string `json:"lizenz,omitempty"`

	// version x o e v handbuch
	VersionXOEVHandbuch string `json:"versionXOEVHandbuch,omitempty"`
}

// Validate validates this update data
func (m *UpdateData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAktualisierungszyklus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnsprechpartner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatumGueltigkeitAb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatumGueltigkeitBis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHerausgebernameKurz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHerausgebernameLang(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDataTypeAktualisierungszyklusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KEINE_AKTUALISIERUNGSZUSICHERUNG","REGELMAESSIGE_AKTUALISIERUNG","UNREGELMAESSIGE_AKTUALISIERUNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDataTypeAktualisierungszyklusPropEnum = append(updateDataTypeAktualisierungszyklusPropEnum, v)
	}
}

const (

	// UpdateDataAktualisierungszyklusKEINEAKTUALISIERUNGSZUSICHERUNG captures enum value "KEINE_AKTUALISIERUNGSZUSICHERUNG"
	UpdateDataAktualisierungszyklusKEINEAKTUALISIERUNGSZUSICHERUNG string = "KEINE_AKTUALISIERUNGSZUSICHERUNG"

	// UpdateDataAktualisierungszyklusREGELMAESSIGEAKTUALISIERUNG captures enum value "REGELMAESSIGE_AKTUALISIERUNG"
	UpdateDataAktualisierungszyklusREGELMAESSIGEAKTUALISIERUNG string = "REGELMAESSIGE_AKTUALISIERUNG"

	// UpdateDataAktualisierungszyklusUNREGELMAESSIGEAKTUALISIERUNG captures enum value "UNREGELMAESSIGE_AKTUALISIERUNG"
	UpdateDataAktualisierungszyklusUNREGELMAESSIGEAKTUALISIERUNG string = "UNREGELMAESSIGE_AKTUALISIERUNG"
)

// prop value enum
func (m *UpdateData) validateAktualisierungszyklusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDataTypeAktualisierungszyklusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateData) validateAktualisierungszyklus(formats strfmt.Registry) error {
	if swag.IsZero(m.Aktualisierungszyklus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAktualisierungszyklusEnum("aktualisierungszyklus", "body", m.Aktualisierungszyklus); err != nil {
		return err
	}

	return nil
}

func (m *UpdateData) validateAnsprechpartner(formats strfmt.Registry) error {
	if swag.IsZero(m.Ansprechpartner) { // not required
		return nil
	}

	for i := 0; i < len(m.Ansprechpartner); i++ {
		if swag.IsZero(m.Ansprechpartner[i]) { // not required
			continue
		}

		if m.Ansprechpartner[i] != nil {
			if err := m.Ansprechpartner[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ansprechpartner" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ansprechpartner" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateData) validateDatumGueltigkeitAb(formats strfmt.Registry) error {
	if swag.IsZero(m.DatumGueltigkeitAb) { // not required
		return nil
	}

	if err := validate.FormatOf("datumGueltigkeitAb", "body", "date-time", m.DatumGueltigkeitAb.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateData) validateDatumGueltigkeitBis(formats strfmt.Registry) error {
	if swag.IsZero(m.DatumGueltigkeitBis) { // not required
		return nil
	}

	if err := validate.FormatOf("datumGueltigkeitBis", "body", "date-time", m.DatumGueltigkeitBis.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateData) validateHerausgebernameKurz(formats strfmt.Registry) error {
	if swag.IsZero(m.HerausgebernameKurz) { // not required
		return nil
	}

	for i := 0; i < len(m.HerausgebernameKurz); i++ {
		if swag.IsZero(m.HerausgebernameKurz[i]) { // not required
			continue
		}

		if m.HerausgebernameKurz[i] != nil {
			if err := m.HerausgebernameKurz[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("herausgebernameKurz" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("herausgebernameKurz" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateData) validateHerausgebernameLang(formats strfmt.Registry) error {
	if swag.IsZero(m.HerausgebernameLang) { // not required
		return nil
	}

	for i := 0; i < len(m.HerausgebernameLang); i++ {
		if swag.IsZero(m.HerausgebernameLang[i]) { // not required
			continue
		}

		if m.HerausgebernameLang[i] != nil {
			if err := m.HerausgebernameLang[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("herausgebernameLang" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("herausgebernameLang" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update data based on the context it is used
func (m *UpdateData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnsprechpartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHerausgebernameKurz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHerausgebernameLang(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateData) contextValidateAnsprechpartner(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ansprechpartner); i++ {

		if m.Ansprechpartner[i] != nil {

			if swag.IsZero(m.Ansprechpartner[i]) { // not required
				return nil
			}

			if err := m.Ansprechpartner[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ansprechpartner" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ansprechpartner" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateData) contextValidateHerausgebernameKurz(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HerausgebernameKurz); i++ {

		if m.HerausgebernameKurz[i] != nil {

			if swag.IsZero(m.HerausgebernameKurz[i]) { // not required
				return nil
			}

			if err := m.HerausgebernameKurz[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("herausgebernameKurz" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("herausgebernameKurz" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateData) contextValidateHerausgebernameLang(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HerausgebernameLang); i++ {

		if m.HerausgebernameLang[i] != nil {

			if swag.IsZero(m.HerausgebernameLang[i]) { // not required
				return nil
			}

			if err := m.HerausgebernameLang[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("herausgebernameLang" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("herausgebernameLang" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateData) UnmarshalBinary(b []byte) error {
	var res UpdateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
