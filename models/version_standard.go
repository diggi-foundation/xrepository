// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionStandard version standard
//
// swagger:model VersionStandard
type VersionStandard struct {

	// abie
	Abie []*ABIE `json:"abie" xml:"abie"`

	// beschreibung
	Beschreibung []*StringMehrsprachig `json:"beschreibung" xml:"beschreibung"`

	// bezugsort
	Bezugsort []string `json:"bezugsort" xml:"bezugsort"`

	// datum gueltigkeit ab
	// Format: date-time
	DatumGueltigkeitAb strfmt.DateTime `json:"datumGueltigkeitAb,omitempty" xml:"datumGueltigkeitAb,omitempty"`

	// datum gueltigkeit bis
	// Format: date-time
	DatumGueltigkeitBis strfmt.DateTime `json:"datumGueltigkeitBis,omitempty" xml:"datumGueltigkeitBis,omitempty"`

	// dokument
	Dokument []*Dokument `json:"dokument" xml:"dokument"`

	// genutzte codeliste kennung
	GenutzteCodelisteKennung []string `json:"genutzteCodelisteKennung" xml:"genutzteCodeliste.kennung"`

	// genutzte externe a b i e kennung
	GenutzteExterneABIEKennung []string `json:"genutzteExterneABIEKennung" xml:"genutzteExterneABIE.kennung"`

	// genutzte version codeliste kennung
	GenutzteVersionCodelisteKennung []string `json:"genutzteVersionCodelisteKennung" xml:"genutzteVersionCodeliste.kennung"`

	// genutzte version standard kennung
	GenutzteVersionStandardKennung []string `json:"genutzteVersionStandardKennung" xml:"genutzteVersionStandard.kennung"`

	// kennung
	// Required: true
	Kennung *string `json:"kennung" xml:"kennung"`

	// kennung inhalt
	// Required: true
	KennungInhalt *string `json:"kennungInhalt" xml:"standard.kennung"`

	// lizenz
	Lizenz string `json:"lizenz,omitempty" xml:"lizenz,omitempty"`

	// name modellierungswerkzeug
	NameModellierungswerkzeug string `json:"nameModellierungswerkzeug,omitempty" xml:"nameModellierungswerkzeug,omitempty"`

	// normalisiertes fachmodell x m i
	NormalisiertesFachmodellXMI *NormalisiertesFachmodellXMI `json:"normalisiertesFachmodellXMI,omitempty" xml:"normalisiertesFachmodellXMI,omitempty"`

	// nutzende version standard kennung
	NutzendeVersionStandardKennung []string `json:"nutzendeVersionStandardKennung" xml:"nutzendeVersionStandard.kennung"`

	// original fachmodell proprietaer
	OriginalFachmodellProprietaer *OriginalFachmodellProprietaer `json:"originalFachmodellProprietaer,omitempty" xml:"originalFachmodellProprietaer,omitempty"`

	// original fachmodell x m i
	OriginalFachmodellXMI *OriginalFachmodellXMI `json:"originalFachmodellXMI,omitempty" xml:"originalFachmodellXMI,omitempty"`

	// schematron output
	SchematronOutput *SchematronOutput `json:"schematronOutput,omitempty" xml:"schematron-output,omitempty"`

	// status fassung
	// Required: true
	StatusFassung *CodeStatusFassung `json:"statusFassung" xml:"statusFassung"`

	// status veroeffentlichung
	// Required: true
	StatusVeroeffentlichung *CodeStatusVeroeffentlichung `json:"statusVeroeffentlichung" xml:"statusVeroeffentlichung"`

	// status verwendung
	// Required: true
	StatusVerwendung *CodeStatusVerwendung `json:"statusVerwendung" xml:"statusVerwendung"`

	// status zertifizierung
	// Required: true
	StatusZertifizierung *CodeStatusZertifizierung `json:"statusZertifizierung" xml:"statusZertifizierung"`

	// version
	// Required: true
	Version *string `json:"version" xml:"version"`

	// version modellierungswerkzeug
	VersionModellierungswerkzeug string `json:"versionModellierungswerkzeug,omitempty" xml:"versionModellierungswerkzeug,omitempty"`

	// version standard extrakt
	VersionStandardExtrakt *VersionStandardExtrakt `json:"versionStandardExtrakt,omitempty" xml:"versionStandardExtrakt,omitempty"`

	// version x generator
	VersionXGenerator string `json:"versionXGenerator,omitempty" xml:"versionXGenerator,omitempty"`

	// version x o e v handbuch
	// Required: true
	VersionXOEVHandbuch *string `json:"versionXOEVHandbuch" xml:"versionXOEVHandbuch"`

	// version x o e v profil
	// Required: true
	VersionXOEVProfil *string `json:"versionXOEVProfil" xml:"versionXOEVProfil"`

	// vorentwurf
	Vorentwurf bool `json:"vorentwurf,omitempty" xml:"vorentwurf,attr,omitempty"`

	// xmlschema
	Xmlschema *Xmlschema `json:"xmlschema,omitempty" xml:"xmlschema,omitempty"`

	// xrepository2 kennung
	Xrepository2Kennung string `json:"xrepository2Kennung,omitempty" xml:"xrepository2Kennung,omitempty"`

	// zeitpunkt anlage
	// Required: true
	// Format: date-time
	ZeitpunktAnlage *strfmt.DateTime `json:"zeitpunktAnlage" xml:"zeitpunktEinstellung"`

	// zeitpunkt letzte bearbeitung
	// Required: true
	// Format: date-time
	ZeitpunktLetzteBearbeitung *strfmt.DateTime `json:"zeitpunktLetzteBearbeitung" xml:"zeitpunktLetzteBearbeitung"`

	// zertifizierung
	Zertifizierung *Zertifizierung `json:"zertifizierung,omitempty" xml:"zertifizierung,omitempty"`
}

// Validate validates this version standard
func (m *VersionStandard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeschreibung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatumGueltigkeitAb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatumGueltigkeitBis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDokument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKennung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKennungInhalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNormalisiertesFachmodellXMI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalFachmodellProprietaer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalFachmodellXMI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchematronOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusFassung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVeroeffentlichung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVerwendung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionStandardExtrakt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionXOEVHandbuch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionXOEVProfil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXmlschema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktAnlage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktLetzteBearbeitung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionStandard) validateAbie(formats strfmt.Registry) error {
	if swag.IsZero(m.Abie) { // not required
		return nil
	}

	for i := 0; i < len(m.Abie); i++ {
		if swag.IsZero(m.Abie[i]) { // not required
			continue
		}

		if m.Abie[i] != nil {
			if err := m.Abie[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abie" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abie" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) validateBeschreibung(formats strfmt.Registry) error {
	if swag.IsZero(m.Beschreibung) { // not required
		return nil
	}

	for i := 0; i < len(m.Beschreibung); i++ {
		if swag.IsZero(m.Beschreibung[i]) { // not required
			continue
		}

		if m.Beschreibung[i] != nil {
			if err := m.Beschreibung[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("beschreibung" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("beschreibung" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) validateDatumGueltigkeitAb(formats strfmt.Registry) error {
	if swag.IsZero(m.DatumGueltigkeitAb) { // not required
		return nil
	}

	if err := validate.FormatOf("datumGueltigkeitAb", "body", "date-time", m.DatumGueltigkeitAb.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateDatumGueltigkeitBis(formats strfmt.Registry) error {
	if swag.IsZero(m.DatumGueltigkeitBis) { // not required
		return nil
	}

	if err := validate.FormatOf("datumGueltigkeitBis", "body", "date-time", m.DatumGueltigkeitBis.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateDokument(formats strfmt.Registry) error {
	if swag.IsZero(m.Dokument) { // not required
		return nil
	}

	for i := 0; i < len(m.Dokument); i++ {
		if swag.IsZero(m.Dokument[i]) { // not required
			continue
		}

		if m.Dokument[i] != nil {
			if err := m.Dokument[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dokument" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dokument" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) validateKennung(formats strfmt.Registry) error {

	if err := validate.Required("kennung", "body", m.Kennung); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateKennungInhalt(formats strfmt.Registry) error {

	if err := validate.Required("kennungInhalt", "body", m.KennungInhalt); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateNormalisiertesFachmodellXMI(formats strfmt.Registry) error {
	if swag.IsZero(m.NormalisiertesFachmodellXMI) { // not required
		return nil
	}

	if m.NormalisiertesFachmodellXMI != nil {
		if err := m.NormalisiertesFachmodellXMI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("normalisiertesFachmodellXMI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("normalisiertesFachmodellXMI")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateOriginalFachmodellProprietaer(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalFachmodellProprietaer) { // not required
		return nil
	}

	if m.OriginalFachmodellProprietaer != nil {
		if err := m.OriginalFachmodellProprietaer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalFachmodellProprietaer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalFachmodellProprietaer")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateOriginalFachmodellXMI(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalFachmodellXMI) { // not required
		return nil
	}

	if m.OriginalFachmodellXMI != nil {
		if err := m.OriginalFachmodellXMI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalFachmodellXMI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalFachmodellXMI")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateSchematronOutput(formats strfmt.Registry) error {
	if swag.IsZero(m.SchematronOutput) { // not required
		return nil
	}

	if m.SchematronOutput != nil {
		if err := m.SchematronOutput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schematronOutput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schematronOutput")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateStatusFassung(formats strfmt.Registry) error {

	if err := validate.Required("statusFassung", "body", m.StatusFassung); err != nil {
		return err
	}

	if m.StatusFassung != nil {
		if err := m.StatusFassung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusFassung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusFassung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateStatusVeroeffentlichung(formats strfmt.Registry) error {

	if err := validate.Required("statusVeroeffentlichung", "body", m.StatusVeroeffentlichung); err != nil {
		return err
	}

	if m.StatusVeroeffentlichung != nil {
		if err := m.StatusVeroeffentlichung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusVeroeffentlichung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusVeroeffentlichung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateStatusVerwendung(formats strfmt.Registry) error {

	if err := validate.Required("statusVerwendung", "body", m.StatusVerwendung); err != nil {
		return err
	}

	if m.StatusVerwendung != nil {
		if err := m.StatusVerwendung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusVerwendung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusVerwendung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateStatusZertifizierung(formats strfmt.Registry) error {

	if err := validate.Required("statusZertifizierung", "body", m.StatusZertifizierung); err != nil {
		return err
	}

	if m.StatusZertifizierung != nil {
		if err := m.StatusZertifizierung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusZertifizierung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusZertifizierung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateVersionStandardExtrakt(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionStandardExtrakt) { // not required
		return nil
	}

	if m.VersionStandardExtrakt != nil {
		if err := m.VersionStandardExtrakt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionStandardExtrakt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionStandardExtrakt")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateVersionXOEVHandbuch(formats strfmt.Registry) error {

	if err := validate.Required("versionXOEVHandbuch", "body", m.VersionXOEVHandbuch); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateVersionXOEVProfil(formats strfmt.Registry) error {

	if err := validate.Required("versionXOEVProfil", "body", m.VersionXOEVProfil); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateXmlschema(formats strfmt.Registry) error {
	if swag.IsZero(m.Xmlschema) { // not required
		return nil
	}

	if m.Xmlschema != nil {
		if err := m.Xmlschema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xmlschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("xmlschema")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) validateZeitpunktAnlage(formats strfmt.Registry) error {

	if err := validate.Required("zeitpunktAnlage", "body", m.ZeitpunktAnlage); err != nil {
		return err
	}

	if err := validate.FormatOf("zeitpunktAnlage", "body", "date-time", m.ZeitpunktAnlage.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateZeitpunktLetzteBearbeitung(formats strfmt.Registry) error {

	if err := validate.Required("zeitpunktLetzteBearbeitung", "body", m.ZeitpunktLetzteBearbeitung); err != nil {
		return err
	}

	if err := validate.FormatOf("zeitpunktLetzteBearbeitung", "body", "date-time", m.ZeitpunktLetzteBearbeitung.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionStandard) validateZertifizierung(formats strfmt.Registry) error {
	if swag.IsZero(m.Zertifizierung) { // not required
		return nil
	}

	if m.Zertifizierung != nil {
		if err := m.Zertifizierung.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zertifizierung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zertifizierung")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this version standard based on the context it is used
func (m *VersionStandard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbie(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBeschreibung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDokument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNormalisiertesFachmodellXMI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalFachmodellProprietaer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalFachmodellXMI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchematronOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusFassung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusVeroeffentlichung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusVerwendung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusZertifizierung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionStandardExtrakt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXmlschema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZertifizierung(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionStandard) contextValidateAbie(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Abie); i++ {

		if m.Abie[i] != nil {

			if swag.IsZero(m.Abie[i]) { // not required
				return nil
			}

			if err := m.Abie[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("abie" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("abie" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) contextValidateBeschreibung(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Beschreibung); i++ {

		if m.Beschreibung[i] != nil {

			if swag.IsZero(m.Beschreibung[i]) { // not required
				return nil
			}

			if err := m.Beschreibung[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("beschreibung" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("beschreibung" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) contextValidateDokument(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dokument); i++ {

		if m.Dokument[i] != nil {

			if swag.IsZero(m.Dokument[i]) { // not required
				return nil
			}

			if err := m.Dokument[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dokument" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dokument" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionStandard) contextValidateNormalisiertesFachmodellXMI(ctx context.Context, formats strfmt.Registry) error {

	if m.NormalisiertesFachmodellXMI != nil {

		if swag.IsZero(m.NormalisiertesFachmodellXMI) { // not required
			return nil
		}

		if err := m.NormalisiertesFachmodellXMI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("normalisiertesFachmodellXMI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("normalisiertesFachmodellXMI")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateOriginalFachmodellProprietaer(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalFachmodellProprietaer != nil {

		if swag.IsZero(m.OriginalFachmodellProprietaer) { // not required
			return nil
		}

		if err := m.OriginalFachmodellProprietaer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalFachmodellProprietaer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalFachmodellProprietaer")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateOriginalFachmodellXMI(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalFachmodellXMI != nil {

		if swag.IsZero(m.OriginalFachmodellXMI) { // not required
			return nil
		}

		if err := m.OriginalFachmodellXMI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalFachmodellXMI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalFachmodellXMI")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateSchematronOutput(ctx context.Context, formats strfmt.Registry) error {

	if m.SchematronOutput != nil {

		if swag.IsZero(m.SchematronOutput) { // not required
			return nil
		}

		if err := m.SchematronOutput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schematronOutput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schematronOutput")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateStatusFassung(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusFassung != nil {

		if err := m.StatusFassung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusFassung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusFassung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateStatusVeroeffentlichung(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusVeroeffentlichung != nil {

		if err := m.StatusVeroeffentlichung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusVeroeffentlichung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusVeroeffentlichung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateStatusVerwendung(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusVerwendung != nil {

		if err := m.StatusVerwendung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusVerwendung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusVerwendung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateStatusZertifizierung(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusZertifizierung != nil {

		if err := m.StatusZertifizierung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusZertifizierung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusZertifizierung")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateVersionStandardExtrakt(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionStandardExtrakt != nil {

		if swag.IsZero(m.VersionStandardExtrakt) { // not required
			return nil
		}

		if err := m.VersionStandardExtrakt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionStandardExtrakt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionStandardExtrakt")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateXmlschema(ctx context.Context, formats strfmt.Registry) error {

	if m.Xmlschema != nil {

		if swag.IsZero(m.Xmlschema) { // not required
			return nil
		}

		if err := m.Xmlschema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xmlschema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("xmlschema")
			}
			return err
		}
	}

	return nil
}

func (m *VersionStandard) contextValidateZertifizierung(ctx context.Context, formats strfmt.Registry) error {

	if m.Zertifizierung != nil {

		if swag.IsZero(m.Zertifizierung) { // not required
			return nil
		}

		if err := m.Zertifizierung.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zertifizierung")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zertifizierung")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionStandard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionStandard) UnmarshalBinary(b []byte) error {
	var res VersionStandard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
