// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatusData status data
//
// swagger:model StatusData
type StatusData struct {

	// status fassung
	// Enum: [ENDFASSUNG ENTWURF]
	StatusFassung string `json:"statusFassung,omitempty"`

	// status veroeffentlichung
	// Enum: [NICHT_VEROEFFENTLICHT VEROEFFENTLICHT]
	StatusVeroeffentlichung string `json:"statusVeroeffentlichung,omitempty"`

	// status verwendung
	// Enum: [AKTUELL AUSGESONDERT VERALTET ZUR_AUSSONDERUNG]
	StatusVerwendung string `json:"statusVerwendung,omitempty"`
}

// Validate validates this status data
func (m *StatusData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatusFassung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVeroeffentlichung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusVerwendung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusDataTypeStatusFassungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENDFASSUNG","ENTWURF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusDataTypeStatusFassungPropEnum = append(statusDataTypeStatusFassungPropEnum, v)
	}
}

const (

	// StatusDataStatusFassungENDFASSUNG captures enum value "ENDFASSUNG"
	StatusDataStatusFassungENDFASSUNG string = "ENDFASSUNG"

	// StatusDataStatusFassungENTWURF captures enum value "ENTWURF"
	StatusDataStatusFassungENTWURF string = "ENTWURF"
)

// prop value enum
func (m *StatusData) validateStatusFassungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, statusDataTypeStatusFassungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StatusData) validateStatusFassung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFassung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusFassungEnum("statusFassung", "body", m.StatusFassung); err != nil {
		return err
	}

	return nil
}

var statusDataTypeStatusVeroeffentlichungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NICHT_VEROEFFENTLICHT","VEROEFFENTLICHT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusDataTypeStatusVeroeffentlichungPropEnum = append(statusDataTypeStatusVeroeffentlichungPropEnum, v)
	}
}

const (

	// StatusDataStatusVeroeffentlichungNICHTVEROEFFENTLICHT captures enum value "NICHT_VEROEFFENTLICHT"
	StatusDataStatusVeroeffentlichungNICHTVEROEFFENTLICHT string = "NICHT_VEROEFFENTLICHT"

	// StatusDataStatusVeroeffentlichungVEROEFFENTLICHT captures enum value "VEROEFFENTLICHT"
	StatusDataStatusVeroeffentlichungVEROEFFENTLICHT string = "VEROEFFENTLICHT"
)

// prop value enum
func (m *StatusData) validateStatusVeroeffentlichungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, statusDataTypeStatusVeroeffentlichungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StatusData) validateStatusVeroeffentlichung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusVeroeffentlichung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusVeroeffentlichungEnum("statusVeroeffentlichung", "body", m.StatusVeroeffentlichung); err != nil {
		return err
	}

	return nil
}

var statusDataTypeStatusVerwendungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AKTUELL","AUSGESONDERT","VERALTET","ZUR_AUSSONDERUNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusDataTypeStatusVerwendungPropEnum = append(statusDataTypeStatusVerwendungPropEnum, v)
	}
}

const (

	// StatusDataStatusVerwendungAKTUELL captures enum value "AKTUELL"
	StatusDataStatusVerwendungAKTUELL string = "AKTUELL"

	// StatusDataStatusVerwendungAUSGESONDERT captures enum value "AUSGESONDERT"
	StatusDataStatusVerwendungAUSGESONDERT string = "AUSGESONDERT"

	// StatusDataStatusVerwendungVERALTET captures enum value "VERALTET"
	StatusDataStatusVerwendungVERALTET string = "VERALTET"

	// StatusDataStatusVerwendungZURAUSSONDERUNG captures enum value "ZUR_AUSSONDERUNG"
	StatusDataStatusVerwendungZURAUSSONDERUNG string = "ZUR_AUSSONDERUNG"
)

// prop value enum
func (m *StatusData) validateStatusVerwendungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, statusDataTypeStatusVerwendungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StatusData) validateStatusVerwendung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusVerwendung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusVerwendungEnum("statusVerwendung", "body", m.StatusVerwendung); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this status data based on context it is used
func (m *StatusData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatusData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusData) UnmarshalBinary(b []byte) error {
	var res StatusData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
