// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NutzerSearch nutzer search
//
// swagger:model NutzerSearch
type NutzerSearch struct {

	// email
	Email string `json:"email,omitempty"`

	// hat token
	HatToken bool `json:"hatToken,omitempty"`

	// hat ungueltigen token
	HatUngueltigenToken bool `json:"hatUngueltigenToken,omitempty"`

	// kennungen
	Kennungen []string `json:"kennungen"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// match
	Match string `json:"match,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// rolle
	// Enum: [ADMIN USER ANONYM GUTACHTER]
	Rolle string `json:"rolle,omitempty"`

	// token gueltig ab
	TokenGueltigAb *RangeDate `json:"tokenGueltigAb,omitempty"`

	// token gueltig bis
	TokenGueltigBis *RangeDate `json:"tokenGueltigBis,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this nutzer search
func (m *NutzerSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRolle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenGueltigAb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenGueltigBis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nutzerSearchTypeRollePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMIN","USER","ANONYM","GUTACHTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nutzerSearchTypeRollePropEnum = append(nutzerSearchTypeRollePropEnum, v)
	}
}

const (

	// NutzerSearchRolleADMIN captures enum value "ADMIN"
	NutzerSearchRolleADMIN string = "ADMIN"

	// NutzerSearchRolleUSER captures enum value "USER"
	NutzerSearchRolleUSER string = "USER"

	// NutzerSearchRolleANONYM captures enum value "ANONYM"
	NutzerSearchRolleANONYM string = "ANONYM"

	// NutzerSearchRolleGUTACHTER captures enum value "GUTACHTER"
	NutzerSearchRolleGUTACHTER string = "GUTACHTER"
)

// prop value enum
func (m *NutzerSearch) validateRolleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nutzerSearchTypeRollePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NutzerSearch) validateRolle(formats strfmt.Registry) error {
	if swag.IsZero(m.Rolle) { // not required
		return nil
	}

	// value enum
	if err := m.validateRolleEnum("rolle", "body", m.Rolle); err != nil {
		return err
	}

	return nil
}

func (m *NutzerSearch) validateTokenGueltigAb(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenGueltigAb) { // not required
		return nil
	}

	if m.TokenGueltigAb != nil {
		if err := m.TokenGueltigAb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenGueltigAb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenGueltigAb")
			}
			return err
		}
	}

	return nil
}

func (m *NutzerSearch) validateTokenGueltigBis(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenGueltigBis) { // not required
		return nil
	}

	if m.TokenGueltigBis != nil {
		if err := m.TokenGueltigBis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenGueltigBis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenGueltigBis")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nutzer search based on the context it is used
func (m *NutzerSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTokenGueltigAb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenGueltigBis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NutzerSearch) contextValidateTokenGueltigAb(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenGueltigAb != nil {

		if swag.IsZero(m.TokenGueltigAb) { // not required
			return nil
		}

		if err := m.TokenGueltigAb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenGueltigAb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenGueltigAb")
			}
			return err
		}
	}

	return nil
}

func (m *NutzerSearch) contextValidateTokenGueltigBis(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenGueltigBis != nil {

		if swag.IsZero(m.TokenGueltigBis) { // not required
			return nil
		}

		if err := m.TokenGueltigBis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenGueltigBis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenGueltigBis")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NutzerSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NutzerSearch) UnmarshalBinary(b []byte) error {
	var res NutzerSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
