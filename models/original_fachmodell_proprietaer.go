// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OriginalFachmodellProprietaer original fachmodell proprietaer
//
// swagger:model OriginalFachmodellProprietaer
type OriginalFachmodellProprietaer struct {

	// artefact typ
	// Enum: [FACHMODELL_XMI FACHMODELL_NORMALISIERT FACHMODELL_PROPRIETAER FACHMODELL_GENERICODE]
	ArtefactTyp string `json:"artefactTyp,omitempty"`

	// datei
	// Required: true
	Datei []*Datei `json:"datei" xml:"datei"`

	// new
	New bool `json:"new,omitempty"`

	// zeitpunkt letzte einstellung
	// Format: date-time
	ZeitpunktLetzteEinstellung strfmt.DateTime `json:"zeitpunktLetzteEinstellung,omitempty" xml:"zeitpunktLetzteEinstellung,omitempty"`
}

// Validate validates this original fachmodell proprietaer
func (m *OriginalFachmodellProprietaer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtefactTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatei(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktLetzteEinstellung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var originalFachmodellProprietaerTypeArtefactTypPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FACHMODELL_XMI","FACHMODELL_NORMALISIERT","FACHMODELL_PROPRIETAER","FACHMODELL_GENERICODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		originalFachmodellProprietaerTypeArtefactTypPropEnum = append(originalFachmodellProprietaerTypeArtefactTypPropEnum, v)
	}
}

const (

	// OriginalFachmodellProprietaerArtefactTypFACHMODELLXMI captures enum value "FACHMODELL_XMI"
	OriginalFachmodellProprietaerArtefactTypFACHMODELLXMI string = "FACHMODELL_XMI"

	// OriginalFachmodellProprietaerArtefactTypFACHMODELLNORMALISIERT captures enum value "FACHMODELL_NORMALISIERT"
	OriginalFachmodellProprietaerArtefactTypFACHMODELLNORMALISIERT string = "FACHMODELL_NORMALISIERT"

	// OriginalFachmodellProprietaerArtefactTypFACHMODELLPROPRIETAER captures enum value "FACHMODELL_PROPRIETAER"
	OriginalFachmodellProprietaerArtefactTypFACHMODELLPROPRIETAER string = "FACHMODELL_PROPRIETAER"

	// OriginalFachmodellProprietaerArtefactTypFACHMODELLGENERICODE captures enum value "FACHMODELL_GENERICODE"
	OriginalFachmodellProprietaerArtefactTypFACHMODELLGENERICODE string = "FACHMODELL_GENERICODE"
)

// prop value enum
func (m *OriginalFachmodellProprietaer) validateArtefactTypEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, originalFachmodellProprietaerTypeArtefactTypPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OriginalFachmodellProprietaer) validateArtefactTyp(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtefactTyp) { // not required
		return nil
	}

	// value enum
	if err := m.validateArtefactTypEnum("artefactTyp", "body", m.ArtefactTyp); err != nil {
		return err
	}

	return nil
}

func (m *OriginalFachmodellProprietaer) validateDatei(formats strfmt.Registry) error {

	if err := validate.Required("datei", "body", m.Datei); err != nil {
		return err
	}

	for i := 0; i < len(m.Datei); i++ {
		if swag.IsZero(m.Datei[i]) { // not required
			continue
		}

		if m.Datei[i] != nil {
			if err := m.Datei[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datei" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datei" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OriginalFachmodellProprietaer) validateZeitpunktLetzteEinstellung(formats strfmt.Registry) error {
	if swag.IsZero(m.ZeitpunktLetzteEinstellung) { // not required
		return nil
	}

	if err := validate.FormatOf("zeitpunktLetzteEinstellung", "body", "date-time", m.ZeitpunktLetzteEinstellung.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this original fachmodell proprietaer based on the context it is used
func (m *OriginalFachmodellProprietaer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatei(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OriginalFachmodellProprietaer) contextValidateDatei(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datei); i++ {

		if m.Datei[i] != nil {

			if swag.IsZero(m.Datei[i]) { // not required
				return nil
			}

			if err := m.Datei[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datei" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datei" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OriginalFachmodellProprietaer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OriginalFachmodellProprietaer) UnmarshalBinary(b []byte) error {
	var res OriginalFachmodellProprietaer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
