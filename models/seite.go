// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Seite seite
//
// swagger:model Seite
type Seite struct {

	// deletable
	Deletable bool `json:"deletable,omitempty" xml:"deletable,attr,omitempty"`

	// fragment
	Fragment bool `json:"fragment,omitempty" xml:"fragment,attr,omitempty"`

	// kennung
	// Required: true
	Kennung *string `json:"kennung" xml:"kennung"`

	// markdown
	// Required: true
	Markdown *string `json:"markdown" xml:"markdown"`

	// pfad
	// Required: true
	Pfad *string `json:"pfad" xml:"pfad"`

	// restriction
	Restriction string `json:"restriction,omitempty" xml:"restriction,attr,omitempty"`

	// titel
	// Required: true
	Titel *string `json:"titel" xml:"titel"`
}

// Validate validates this seite
func (m *Seite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKennung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePfad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Seite) validateKennung(formats strfmt.Registry) error {

	if err := validate.Required("kennung", "body", m.Kennung); err != nil {
		return err
	}

	return nil
}

func (m *Seite) validateMarkdown(formats strfmt.Registry) error {

	if err := validate.Required("markdown", "body", m.Markdown); err != nil {
		return err
	}

	return nil
}

func (m *Seite) validatePfad(formats strfmt.Registry) error {

	if err := validate.Required("pfad", "body", m.Pfad); err != nil {
		return err
	}

	return nil
}

func (m *Seite) validateTitel(formats strfmt.Registry) error {

	if err := validate.Required("titel", "body", m.Titel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this seite based on context it is used
func (m *Seite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Seite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Seite) UnmarshalBinary(b []byte) error {
	var res Seite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
