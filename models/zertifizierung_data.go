// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZertifizierungData zertifizierung data
//
// swagger:model ZertifizierungData
type ZertifizierungData struct {

	// letzte aenderung pflegekonzept
	// Format: date-time
	LetzteAenderungPflegekonzept strfmt.DateTime `json:"letzteAenderungPflegekonzept,omitempty"`

	// letzte anpassung fachmodell proprietaer
	// Format: date-time
	LetzteAnpassungFachmodellProprietaer strfmt.DateTime `json:"letzteAnpassungFachmodellProprietaer,omitempty"`

	// letzte anpassung spezifikation
	// Format: date-time
	LetzteAnpassungSpezifikation strfmt.DateTime `json:"letzteAnpassungSpezifikation,omitempty"`

	// letzte anpassung x m i
	// Format: date-time
	LetzteAnpassungXMI strfmt.DateTime `json:"letzteAnpassungXMI,omitempty"`

	// letzte anpassung x s d
	// Format: date-time
	LetzteAnpassungXSD strfmt.DateTime `json:"letzteAnpassungXSD,omitempty"`

	// letzte anpassung xoev zertifizierung
	// Format: date-time
	LetzteAnpassungXoevZertifizierung strfmt.DateTime `json:"letzteAnpassungXoevZertifizierung,omitempty"`

	// letzte anpassung zertifizierungs antrags dokument
	// Format: date-time
	LetzteAnpassungZertifizierungsAntragsDokument strfmt.DateTime `json:"letzteAnpassungZertifizierungsAntragsDokument,omitempty"`

	// status zertifizierung
	// Enum: [NICHT_ZERTIFIZIERT ZERTIFIZIERT ZERTIFIZIERUNG_BEANTRAGT]
	StatusZertifizierung string `json:"statusZertifizierung,omitempty"`

	// zeitpunkt beantragung
	// Format: date-time
	ZeitpunktBeantragung strfmt.DateTime `json:"zeitpunktBeantragung,omitempty"`

	// zeitpunkt zertifizierung
	// Format: date-time
	ZeitpunktZertifizierung strfmt.DateTime `json:"zeitpunktZertifizierung,omitempty"`
}

// Validate validates this zertifizierung data
func (m *ZertifizierungData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLetzteAenderungPflegekonzept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungFachmodellProprietaer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungSpezifikation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungXMI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungXSD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungXoevZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetzteAnpassungZertifizierungsAntragsDokument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktBeantragung(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeitpunktZertifizierung(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZertifizierungData) validateLetzteAenderungPflegekonzept(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAenderungPflegekonzept) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAenderungPflegekonzept", "body", "date-time", m.LetzteAenderungPflegekonzept.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungFachmodellProprietaer(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungFachmodellProprietaer) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungFachmodellProprietaer", "body", "date-time", m.LetzteAnpassungFachmodellProprietaer.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungSpezifikation(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungSpezifikation) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungSpezifikation", "body", "date-time", m.LetzteAnpassungSpezifikation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungXMI(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungXMI) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungXMI", "body", "date-time", m.LetzteAnpassungXMI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungXSD(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungXSD) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungXSD", "body", "date-time", m.LetzteAnpassungXSD.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungXoevZertifizierung(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungXoevZertifizierung) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungXoevZertifizierung", "body", "date-time", m.LetzteAnpassungXoevZertifizierung.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateLetzteAnpassungZertifizierungsAntragsDokument(formats strfmt.Registry) error {
	if swag.IsZero(m.LetzteAnpassungZertifizierungsAntragsDokument) { // not required
		return nil
	}

	if err := validate.FormatOf("letzteAnpassungZertifizierungsAntragsDokument", "body", "date-time", m.LetzteAnpassungZertifizierungsAntragsDokument.String(), formats); err != nil {
		return err
	}

	return nil
}

var zertifizierungDataTypeStatusZertifizierungPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NICHT_ZERTIFIZIERT","ZERTIFIZIERT","ZERTIFIZIERUNG_BEANTRAGT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zertifizierungDataTypeStatusZertifizierungPropEnum = append(zertifizierungDataTypeStatusZertifizierungPropEnum, v)
	}
}

const (

	// ZertifizierungDataStatusZertifizierungNICHTZERTIFIZIERT captures enum value "NICHT_ZERTIFIZIERT"
	ZertifizierungDataStatusZertifizierungNICHTZERTIFIZIERT string = "NICHT_ZERTIFIZIERT"

	// ZertifizierungDataStatusZertifizierungZERTIFIZIERT captures enum value "ZERTIFIZIERT"
	ZertifizierungDataStatusZertifizierungZERTIFIZIERT string = "ZERTIFIZIERT"

	// ZertifizierungDataStatusZertifizierungZERTIFIZIERUNGBEANTRAGT captures enum value "ZERTIFIZIERUNG_BEANTRAGT"
	ZertifizierungDataStatusZertifizierungZERTIFIZIERUNGBEANTRAGT string = "ZERTIFIZIERUNG_BEANTRAGT"
)

// prop value enum
func (m *ZertifizierungData) validateStatusZertifizierungEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zertifizierungDataTypeStatusZertifizierungPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZertifizierungData) validateStatusZertifizierung(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusZertifizierung) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusZertifizierungEnum("statusZertifizierung", "body", m.StatusZertifizierung); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateZeitpunktBeantragung(formats strfmt.Registry) error {
	if swag.IsZero(m.ZeitpunktBeantragung) { // not required
		return nil
	}

	if err := validate.FormatOf("zeitpunktBeantragung", "body", "date-time", m.ZeitpunktBeantragung.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ZertifizierungData) validateZeitpunktZertifizierung(formats strfmt.Registry) error {
	if swag.IsZero(m.ZeitpunktZertifizierung) { // not required
		return nil
	}

	if err := validate.FormatOf("zeitpunktZertifizierung", "body", "date-time", m.ZeitpunktZertifizierung.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this zertifizierung data based on context it is used
func (m *ZertifizierungData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ZertifizierungData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZertifizierungData) UnmarshalBinary(b []byte) error {
	var res ZertifizierungData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
