// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchematronOutput schematron output
//
// swagger:model SchematronOutput
type SchematronOutput struct {

	// active pattern and fired rule and failed assert
	ActivePatternAndFiredRuleAndFailedAssert []Serializable `json:"activePatternAndFiredRuleAndFailedAssert"`

	// ns prefix in attribute values
	NsPrefixInAttributeValues []*NsPrefixInAttributeValues `json:"nsPrefixInAttributeValues" xml:"ns-prefix-in-attribute-values"`

	// phase
	Phase string `json:"phase,omitempty" xml:"phase,attr,omitempty"`

	// schema version
	SchemaVersion string `json:"schemaVersion,omitempty" xml:"schemaVersion,attr,omitempty"`

	// text
	Text []*Text `json:"text" xml:"text"`

	// title
	Title string `json:"title,omitempty" xml:"title,attr,omitempty"`
}

// Validate validates this schematron output
func (m *SchematronOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNsPrefixInAttributeValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchematronOutput) validateNsPrefixInAttributeValues(formats strfmt.Registry) error {
	if swag.IsZero(m.NsPrefixInAttributeValues) { // not required
		return nil
	}

	for i := 0; i < len(m.NsPrefixInAttributeValues); i++ {
		if swag.IsZero(m.NsPrefixInAttributeValues[i]) { // not required
			continue
		}

		if m.NsPrefixInAttributeValues[i] != nil {
			if err := m.NsPrefixInAttributeValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsPrefixInAttributeValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsPrefixInAttributeValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchematronOutput) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	for i := 0; i < len(m.Text); i++ {
		if swag.IsZero(m.Text[i]) { // not required
			continue
		}

		if m.Text[i] != nil {
			if err := m.Text[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("text" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("text" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schematron output based on the context it is used
func (m *SchematronOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNsPrefixInAttributeValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchematronOutput) contextValidateNsPrefixInAttributeValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NsPrefixInAttributeValues); i++ {

		if m.NsPrefixInAttributeValues[i] != nil {

			if swag.IsZero(m.NsPrefixInAttributeValues[i]) { // not required
				return nil
			}

			if err := m.NsPrefixInAttributeValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsPrefixInAttributeValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsPrefixInAttributeValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchematronOutput) contextValidateText(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Text); i++ {

		if m.Text[i] != nil {

			if swag.IsZero(m.Text[i]) { // not required
				return nil
			}

			if err := m.Text[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("text" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("text" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchematronOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchematronOutput) UnmarshalBinary(b []byte) error {
	var res SchematronOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
