// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserData user data
//
// swagger:model UserData
type UserData struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// permissions
	Permissions []string `json:"permissions"`

	// rollen
	Rollen []string `json:"rollen"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this user data
func (m *UserData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userDataPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEMPROPERTIES_CONFIGURATION","SYSTEMDATEN_ABZUG","MANAGE_XOEV_BIBLIOTHEK","INHALT_ANLEGEN","VERSION_ANLEGEN","VERSION_AKTUALISIEREN","ZERTIFIZIEREN","PROFIL_OPERATION","VALIDIERUNGS_STATUS_EINSEHEN","VIEW_DRAFT_OBJEKTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDataPermissionsItemsEnum = append(userDataPermissionsItemsEnum, v)
	}
}

func (m *UserData) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDataPermissionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserData) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

var userDataRollenItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMIN","USER","ANONYM","GUTACHTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDataRollenItemsEnum = append(userDataRollenItemsEnum, v)
	}
}

func (m *UserData) validateRollenItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDataRollenItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserData) validateRollen(formats strfmt.Registry) error {
	if swag.IsZero(m.Rollen) { // not required
		return nil
	}

	for i := 0; i < len(m.Rollen); i++ {

		// value enum
		if err := m.validateRollenItemsEnum("rollen"+"."+strconv.Itoa(i), "body", m.Rollen[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this user data based on context it is used
func (m *UserData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserData) UnmarshalBinary(b []byte) error {
	var res UserData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
