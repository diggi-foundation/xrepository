// Code generated by go-swagger; DO NOT EDIT.

package codeliste

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new codeliste API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for codeliste API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Abbestellen(params *AbbestellenParams, opts ...ClientOption) error

	Abonnieren(params *AbonnierenParams, opts ...ClientOption) error

	GetAbonnenten(params *GetAbonnentenParams, opts ...ClientOption) error

	GetAllGenericode(params *GetAllGenericodeParams, opts ...ClientOption) error

	GetAnfrageToken(params *GetAnfrageTokenParams, opts ...ClientOption) error

	GetBeziehungen(params *GetBeziehungenParams, opts ...ClientOption) (*GetBeziehungenOK, error)

	GetDebugInfo(params *GetDebugInfoParams, opts ...ClientOption) (*GetDebugInfoOK, error)

	GetDokumentation(params *GetDokumentationParams, opts ...ClientOption) error

	GetDokumente(params *GetDokumenteParams, opts ...ClientOption) error

	GetGueltigeVersion(params *GetGueltigeVersionParams, opts ...ClientOption) error

	GetJSON(params *GetJSONParams, opts ...ClientOption) error

	GetModel(params *GetModelParams, opts ...ClientOption) error

	GetModelPlain(params *GetModelPlainParams, opts ...ClientOption) error

	GetTechnischerBestandteil(params *GetTechnischerBestandteilParams, opts ...ClientOption) error

	Metadaten(params *MetadatenParams, opts ...ClientOption) error

	RemoveDokument(params *RemoveDokumentParams, opts ...ClientOption) error

	RemoveTechnischerBestandteil(params *RemoveTechnischerBestandteilParams, opts ...ClientOption) error

	SendAnfrage(params *SendAnfrageParams, opts ...ClientOption) error

	TransferOwnership(params *TransferOwnershipParams, opts ...ClientOption) error

	Update(params *UpdateParams, opts ...ClientOption) error

	UpdateStatus(params *UpdateStatusParams, opts ...ClientOption) error

	UploadDokument(params *UploadDokumentParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
Abbestellen abbestellen API
*/
func (a *Client) Abbestellen(params *AbbestellenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbbestellenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abbestellen",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}/abbestellen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AbbestellenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Abonnieren abonnieren API
*/
func (a *Client) Abonnieren(params *AbonnierenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbonnierenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abonnieren",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}/abonnieren",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AbonnierenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAbonnenten get abonnenten API
*/
func (a *Client) GetAbonnenten(params *GetAbonnentenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbonnentenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAbonnenten",
		Method:             "GET",
		PathPattern:        "/codeliste/{urn}/abonnenten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAbonnentenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAllGenericode lieferts alle version dieser codeliste im genericode format
*/
func (a *Client) GetAllGenericode(params *GetAllGenericodeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGenericodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllGenericode",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/genericode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllGenericodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAnfrageToken erstellts einen token dieser wird zur validierung einer anfrage benötigt
*/
func (a *Client) GetAnfrageToken(params *GetAnfrageTokenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnfrageTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAnfrageToken",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/anfrage/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAnfrageTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetBeziehungen get beziehungen API
*/
func (a *Client) GetBeziehungen(params *GetBeziehungenParams, opts ...ClientOption) (*GetBeziehungenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBeziehungenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBeziehungen",
		Method:             "GET",
		PathPattern:        "/codeliste/{urn}/beziehungen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBeziehungenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBeziehungenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBeziehungen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugInfo get debug info API
*/
func (a *Client) GetDebugInfo(params *GetDebugInfoParams, opts ...ClientOption) (*GetDebugInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDebugInfo",
		Method:             "GET",
		PathPattern:        "/codeliste/{urn}/debugInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDebugInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDebugInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDokumentation lädts ein dokument aus dem bereich dokumentation bei inhalt herunter
*/
func (a *Client) GetDokumentation(params *GetDokumentationParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumentationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumentation",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/dokumentation/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumentationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetDokumente lädts alle dokumente des objekts zu der kennung als z IP herunter
*/
func (a *Client) GetDokumente(params *GetDokumenteParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumenteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumente",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/dokumente",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumenteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetGueltigeVersion lieferts die aktuell gültige version dieser codeliste im genericode format
*/
func (a *Client) GetGueltigeVersion(params *GetGueltigeVersionParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGueltigeVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGueltigeVersion",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/gueltigeVersion",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGueltigeVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetJSON get Json API
*/
func (a *Client) GetJSON(params *GetJSONParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJSONParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJson",
		Method:             "GET",
		PathPattern:        "/codeliste/{urn}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJSONReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModel get model API
*/
func (a *Client) GetModel(params *GetModelParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModel",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/model",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModelPlain herunterladens des modells daten dieses objekts
*/
func (a *Client) GetModelPlain(params *GetModelPlainParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelPlainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelPlain",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelPlainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetTechnischerBestandteil lädts ein dokument aus dem bereich dokumentation bei inhalt herunter
*/
func (a *Client) GetTechnischerBestandteil(params *GetTechnischerBestandteilParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTechnischerBestandteilParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTechnischerBestandteil",
		Method:             "GET",
		PathPattern:        "/codeliste/{kennung}/technischerBestandteil/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTechnischerBestandteilReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Metadaten metadaten API
*/
func (a *Client) Metadaten(params *MetadatenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetadatenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "metadaten",
		Method:             "GET",
		PathPattern:        "/codeliste/{urn}/metadaten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MetadatenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveDokument entfernts ein dokument aus dem bereich dokumentation
*/
func (a *Client) RemoveDokument(params *RemoveDokumentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDokumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDokument",
		Method:             "DELETE",
		PathPattern:        "/codeliste/{urn}/dokumentation/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveDokumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveTechnischerBestandteil entfernts ein dokument aus dem bereich technischer bestandteil
*/
func (a *Client) RemoveTechnischerBestandteil(params *RemoveTechnischerBestandteilParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTechnischerBestandteilParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTechnischerBestandteil",
		Method:             "DELETE",
		PathPattern:        "/codeliste/{urn}/technischerBestandteil/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveTechnischerBestandteilReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SendAnfrage sendets eine nutzeranfrage an den ansprechpartner des inhalts
*/
func (a *Client) SendAnfrage(params *SendAnfrageParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendAnfrageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendAnfrage",
		Method:             "POST",
		PathPattern:        "/codeliste/{kennung}/anfrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SendAnfrageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
TransferOwnership transfer ownership API
*/
func (a *Client) TransferOwnership(params *TransferOwnershipParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnershipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOwnership",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}/transfer-owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Update update API
*/
func (a *Client) Update(params *UpdateParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateStatus update status API
*/
func (a *Client) UpdateStatus(params *UpdateStatusParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStatus",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}/updateStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UploadDokument uploads eines neuen dokuments
*/
func (a *Client) UploadDokument(params *UploadDokumentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDokumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadDokument",
		Method:             "POST",
		PathPattern:        "/codeliste/{urn}/add-document",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadDokumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
