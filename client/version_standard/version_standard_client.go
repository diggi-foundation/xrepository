// Code generated by go-swagger; DO NOT EDIT.

package version_standard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new version standard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for version standard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Abbestellen4(params *Abbestellen4Params, opts ...ClientOption) error

	Abonnieren4(params *Abonnieren4Params, opts ...ClientOption) error

	AddVersionStandard(params *AddVersionStandardParams, opts ...ClientOption) (*AddVersionStandardOK, error)

	DownloadGenutztenCodelisten(params *DownloadGenutztenCodelistenParams, opts ...ClientOption) error

	DownloadNormalisiertesFachmodell(params *DownloadNormalisiertesFachmodellParams, opts ...ClientOption) error

	DownloadOriginalFachmodell(params *DownloadOriginalFachmodellParams, opts ...ClientOption) error

	DownloadProprietaeresFachmodell(params *DownloadProprietaeresFachmodellParams, opts ...ClientOption) error

	GetAbonnenten4(params *GetAbonnenten4Params, opts ...ClientOption) error

	GetBeziehungen4(params *GetBeziehungen4Params, opts ...ClientOption) (*GetBeziehungen4OK, error)

	GetDebugInfo4(params *GetDebugInfo4Params, opts ...ClientOption) (*GetDebugInfo4OK, error)

	GetDokument1(params *GetDokument1Params, opts ...ClientOption) error

	GetDokumente4(params *GetDokumente4Params, opts ...ClientOption) error

	GetJSON4(params *GetJSON4Params, opts ...ClientOption) error

	GetModelPlain4(params *GetModelPlain4Params, opts ...ClientOption) error

	GetModel4(params *GetModel4Params, opts ...ClientOption) error

	GetXMLSchema(params *GetXMLSchemaParams, opts ...ClientOption) error

	Metadaten4(params *Metadaten4Params, opts ...ClientOption) error

	RemoveDokumentFromVersionStandard(params *RemoveDokumentFromVersionStandardParams, opts ...ClientOption) error

	RemoveDokument2(params *RemoveDokument2Params, opts ...ClientOption) error

	RemoveProprietaeresFachmodell(params *RemoveProprietaeresFachmodellParams, opts ...ClientOption) error

	TransferOwnership4(params *TransferOwnership4Params, opts ...ClientOption) error

	UpdateStatus4(params *UpdateStatus4Params, opts ...ClientOption) error

	Update8(params *Update8Params, opts ...ClientOption) error

	UploadDokument4(params *UploadDokument4Params, opts ...ClientOption) error

	ZertifizierungUpdate(params *ZertifizierungUpdateParams, opts ...ClientOption) error

	ZertifizierungsInformationen(params *ZertifizierungsInformationenParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
Abbestellen4 abbestellen 4 API
*/
func (a *Client) Abbestellen4(params *Abbestellen4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbbestellen4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abbestellen_4",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}/abbestellen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abbestellen4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Abonnieren4 abonnieren 4 API
*/
func (a *Client) Abonnieren4(params *Abonnieren4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbonnieren4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abonnieren_4",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}/abonnieren",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abonnieren4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
AddVersionStandard uploads eines neuen modells
*/
func (a *Client) AddVersionStandard(params *AddVersionStandardParams, opts ...ClientOption) (*AddVersionStandardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVersionStandardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVersionStandard",
		Method:             "POST",
		PathPattern:        "/version_standard/hochladen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddVersionStandardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVersionStandardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVersionStandard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadGenutztenCodelisten lädts alle genutzte und aktuelle codelisten in g c format herunter
*/
func (a *Client) DownloadGenutztenCodelisten(params *DownloadGenutztenCodelistenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadGenutztenCodelistenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadGenutztenCodelisten",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/genutzteAktuelleCodelisten",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadGenutztenCodelistenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DownloadNormalisiertesFachmodell lädts das normalisierte fachmodell herunter
*/
func (a *Client) DownloadNormalisiertesFachmodell(params *DownloadNormalisiertesFachmodellParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadNormalisiertesFachmodellParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadNormalisiertesFachmodell",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/normalisiertesFachmodellXMI",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadNormalisiertesFachmodellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DownloadOriginalFachmodell lädts das original fachmodell x m i herunter
*/
func (a *Client) DownloadOriginalFachmodell(params *DownloadOriginalFachmodellParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadOriginalFachmodellParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadOriginalFachmodell",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/originalFachmodellXMI",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadOriginalFachmodellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DownloadProprietaeresFachmodell lädts das proprietäre fachmodell herunter
*/
func (a *Client) DownloadProprietaeresFachmodell(params *DownloadProprietaeresFachmodellParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadProprietaeresFachmodellParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadProprietaeresFachmodell",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/originalFachmodellProprietaer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadProprietaeresFachmodellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAbonnenten4 get abonnenten 4 API
*/
func (a *Client) GetAbonnenten4(params *GetAbonnenten4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbonnenten4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAbonnenten_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/abonnenten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAbonnenten4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetBeziehungen4 get beziehungen 4 API
*/
func (a *Client) GetBeziehungen4(params *GetBeziehungen4Params, opts ...ClientOption) (*GetBeziehungen4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBeziehungen4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBeziehungen_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/beziehungen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBeziehungen4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBeziehungen4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBeziehungen_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugInfo4 get debug info 4 API
*/
func (a *Client) GetDebugInfo4(params *GetDebugInfo4Params, opts ...ClientOption) (*GetDebugInfo4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugInfo4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDebugInfo_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/debugInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDebugInfo4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugInfo4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDebugInfo_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDokument1 lädts ein dokument herunter
*/
func (a *Client) GetDokument1(params *GetDokument1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokument1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokument_1",
		Method:             "GET",
		PathPattern:        "/version_standard/{kennung}/dokument/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokument1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetDokumente4 lädts alle dokumente des objekts zu der kennung als z IP herunter
*/
func (a *Client) GetDokumente4(params *GetDokumente4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumente4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumente_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{kennung}/dokumente",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumente4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetJSON4 get Json 4 API
*/
func (a *Client) GetJSON4(params *GetJSON4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJSON4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJson_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJSON4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModelPlain4 herunterladens des modells daten dieses objekts
*/
func (a *Client) GetModelPlain4(params *GetModelPlain4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelPlain4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelPlain_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{kennung}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelPlain4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModel4 get model 4 API
*/
func (a *Client) GetModel4(params *GetModel4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModel4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModel_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{kennung}/model",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModel4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetXMLSchema lädts das XML schema herunter
*/
func (a *Client) GetXMLSchema(params *GetXMLSchemaParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXMLSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getXmlSchema",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/xmlschema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetXMLSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Metadaten4 metadaten 4 API
*/
func (a *Client) Metadaten4(params *Metadaten4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetadaten4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "metadaten_4",
		Method:             "GET",
		PathPattern:        "/version_standard/{urn}/metadaten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Metadaten4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveDokumentFromVersionStandard löschens eines dokuments
*/
func (a *Client) RemoveDokumentFromVersionStandard(params *RemoveDokumentFromVersionStandardParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDokumentFromVersionStandardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDokumentFromVersionStandard",
		Method:             "DELETE",
		PathPattern:        "/version_standard/{kennung}/dokument/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveDokumentFromVersionStandardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveDokument2 löschens des XML schemas
*/
func (a *Client) RemoveDokument2(params *RemoveDokument2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDokument2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDokument_2",
		Method:             "DELETE",
		PathPattern:        "/version_standard/{urn}/xmlschema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveDokument2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveProprietaeresFachmodell löschens des XML schemas
*/
func (a *Client) RemoveProprietaeresFachmodell(params *RemoveProprietaeresFachmodellParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveProprietaeresFachmodellParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeProprietaeresFachmodell",
		Method:             "DELETE",
		PathPattern:        "/version_standard/{urn}/originalFachmodellProprietaer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveProprietaeresFachmodellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
TransferOwnership4 transfer ownership 4 API
*/
func (a *Client) TransferOwnership4(params *TransferOwnership4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnership4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOwnership_4",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}/transfer-owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnership4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateStatus4 update status 4 API
*/
func (a *Client) UpdateStatus4(params *UpdateStatus4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatus4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStatus_4",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}/updateStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStatus4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Update8 update 8 API
*/
func (a *Client) Update8(params *Update8Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdate8Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_8",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Update8Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UploadDokument4 uploads eines neuen dokuments
*/
func (a *Client) UploadDokument4(params *UploadDokument4Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDokument4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadDokument_4",
		Method:             "POST",
		PathPattern:        "/version_standard/{urn}/add-document",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadDokument4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ZertifizierungUpdate endpunkts für zertifizierungsfunktionen die eigentliche funktion wird durch den zielstatus definiert
*/
func (a *Client) ZertifizierungUpdate(params *ZertifizierungUpdateParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZertifizierungUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "zertifizierungUpdate",
		Method:             "POST",
		PathPattern:        "/version_standard/{kennung}/zertifizierung",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ZertifizierungUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ZertifizierungsInformationen abrufs von zertifizierungsinformationen
*/
func (a *Client) ZertifizierungsInformationen(params *ZertifizierungsInformationenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZertifizierungsInformationenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "zertifizierungsInformationen",
		Method:             "GET",
		PathPattern:        "/version_standard/{kennung}/zertifizierung",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ZertifizierungsInformationenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
