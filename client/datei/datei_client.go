// Code generated by go-swagger; DO NOT EDIT.

package datei

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new datei API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for datei API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Abbestellen2(params *Abbestellen2Params, opts ...ClientOption) error

	Abonnieren2(params *Abonnieren2Params, opts ...ClientOption) error

	GetAbonnenten2(params *GetAbonnenten2Params, opts ...ClientOption) error

	GetBeziehungen2(params *GetBeziehungen2Params, opts ...ClientOption) (*GetBeziehungen2OK, error)

	GetContent(params *GetContentParams, opts ...ClientOption) error

	GetDebugInfo2(params *GetDebugInfo2Params, opts ...ClientOption) (*GetDebugInfo2OK, error)

	GetDokumente2(params *GetDokumente2Params, opts ...ClientOption) error

	GetJSON2(params *GetJSON2Params, opts ...ClientOption) error

	GetModelPlain2(params *GetModelPlain2Params, opts ...ClientOption) error

	GetModel2(params *GetModel2Params, opts ...ClientOption) error

	Metadaten2(params *Metadaten2Params, opts ...ClientOption) error

	TransferOwnership2(params *TransferOwnership2Params, opts ...ClientOption) error

	UpdateStatus2(params *UpdateStatus2Params, opts ...ClientOption) error

	Update2(params *Update2Params, opts ...ClientOption) error

	UploadDokument2(params *UploadDokument2Params, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
Abbestellen2 abbestellen 2 API
*/
func (a *Client) Abbestellen2(params *Abbestellen2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbbestellen2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abbestellen_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}/abbestellen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abbestellen2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Abonnieren2 abonnieren 2 API
*/
func (a *Client) Abonnieren2(params *Abonnieren2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbonnieren2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abonnieren_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}/abonnieren",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abonnieren2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAbonnenten2 get abonnenten 2 API
*/
func (a *Client) GetAbonnenten2(params *GetAbonnenten2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbonnenten2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAbonnenten_2",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/abonnenten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAbonnenten2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetBeziehungen2 get beziehungen 2 API
*/
func (a *Client) GetBeziehungen2(params *GetBeziehungen2Params, opts ...ClientOption) (*GetBeziehungen2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBeziehungen2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBeziehungen_2",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/beziehungen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBeziehungen2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBeziehungen2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBeziehungen_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContent get content API
*/
func (a *Client) GetContent(params *GetContentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getContent",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/daten",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetDebugInfo2 get debug info 2 API
*/
func (a *Client) GetDebugInfo2(params *GetDebugInfo2Params, opts ...ClientOption) (*GetDebugInfo2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugInfo2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDebugInfo_2",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/debugInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDebugInfo2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugInfo2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDebugInfo_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDokumente2 l√§dts alle dokumente des objekts zu der kennung als z IP herunter
*/
func (a *Client) GetDokumente2(params *GetDokumente2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumente2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumente_2",
		Method:             "GET",
		PathPattern:        "/datei/{kennung}/dokumente",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumente2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetJSON2 get Json 2 API
*/
func (a *Client) GetJSON2(params *GetJSON2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJSON2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJson_2",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJSON2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModelPlain2 herunterladens des modells daten dieses objekts
*/
func (a *Client) GetModelPlain2(params *GetModelPlain2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelPlain2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelPlain_2",
		Method:             "GET",
		PathPattern:        "/datei/{kennung}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelPlain2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModel2 get model 2 API
*/
func (a *Client) GetModel2(params *GetModel2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModel2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModel_2",
		Method:             "GET",
		PathPattern:        "/datei/{kennung}/model",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModel2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Metadaten2 metadaten 2 API
*/
func (a *Client) Metadaten2(params *Metadaten2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetadaten2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "metadaten_2",
		Method:             "GET",
		PathPattern:        "/datei/{urn}/metadaten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Metadaten2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
TransferOwnership2 transfer ownership 2 API
*/
func (a *Client) TransferOwnership2(params *TransferOwnership2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnership2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOwnership_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}/transfer-owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnership2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateStatus2 update status 2 API
*/
func (a *Client) UpdateStatus2(params *UpdateStatus2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatus2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStatus_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}/updateStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStatus2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Update2 update 2 API
*/
func (a *Client) Update2(params *Update2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdate2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Update2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UploadDokument2 uploads eines neuen dokuments
*/
func (a *Client) UploadDokument2(params *UploadDokument2Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDokument2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadDokument_2",
		Method:             "POST",
		PathPattern:        "/datei/{urn}/add-document",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadDokument2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
