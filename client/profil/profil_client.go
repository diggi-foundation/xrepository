// Code generated by go-swagger; DO NOT EDIT.

package profil

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new profil API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for profil API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateUser(params *ActivateUserParams, opts ...ClientOption) error

	ChangePassword(params *ChangePasswordParams, opts ...ClientOption) error

	CheckResetPassword(params *CheckResetPasswordParams, opts ...ClientOption) error

	CreateToken1(params *CreateToken1Params, opts ...ClientOption) error

	GetAbos(params *GetAbosParams, opts ...ClientOption) error

	GetProfile(params *GetProfileParams, opts ...ClientOption) error

	InitResetPassword(params *InitResetPasswordParams, opts ...ClientOption) error

	Register(params *RegisterParams, opts ...ClientOption) error

	ResetPassword(params *ResetPasswordParams, opts ...ClientOption) error

	RevokeToken1(params *RevokeToken1Params, opts ...ClientOption) error

	UpdateProfil(params *UpdateProfilParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivateUser activate user API
*/
func (a *Client) ActivateUser(params *ActivateUserParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "activateUser",
		Method:             "GET",
		PathPattern:        "/profil/registrierung/{activationKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActivateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ChangePassword change password API
*/
func (a *Client) ChangePassword(params *ChangePasswordParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changePassword",
		Method:             "POST",
		PathPattern:        "/profil/passwort_aendern",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
CheckResetPassword prüfens eines reset token und bedingtes weiterleiten auf die react anwendung
*/
func (a *Client) CheckResetPassword(params *CheckResetPasswordParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkResetPassword",
		Method:             "GET",
		PathPattern:        "/profil/passwort_zuruecksetzen/{resetKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
CreateToken1 erzeugts einen neuen API token für den nutzer
*/
func (a *Client) CreateToken1(params *CreateToken1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateToken1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createToken_1",
		Method:             "PUT",
		PathPattern:        "/profil/token/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateToken1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAbos gibts die abonnements des aktuell angemeldeten nutzers zurück
*/
func (a *Client) GetAbos(params *GetAbosParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAbos",
		Method:             "GET",
		PathPattern:        "/profil/abos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAbosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetProfile gibts die daten des akktuellen nutzers zurück
*/
func (a *Client) GetProfile(params *GetProfileParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProfile",
		Method:             "GET",
		PathPattern:        "/profil",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
InitResetPassword init reset password API
*/
func (a *Client) InitResetPassword(params *InitResetPasswordParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initResetPassword",
		Method:             "POST",
		PathPattern:        "/profil/passwort_zuruecksetzen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Register register API
*/
func (a *Client) Register(params *RegisterParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "register",
		Method:             "POST",
		PathPattern:        "/profil/registrierung",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ResetPassword zurücksetzens eines passworts
*/
func (a *Client) ResetPassword(params *ResetPasswordParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetPassword",
		Method:             "POST",
		PathPattern:        "/profil/passwort_zuruecksetzen/{resetKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RevokeToken1 invalidierts einen API token für den nutzer
*/
func (a *Client) RevokeToken1(params *RevokeToken1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeToken1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeToken_1",
		Method:             "DELETE",
		PathPattern:        "/profil/token/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RevokeToken1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateProfil aktualisierungs der metadatendes des eigenen profils
*/
func (a *Client) UpdateProfil(params *UpdateProfilParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProfilParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProfil",
		Method:             "POST",
		PathPattern:        "/profil",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProfilReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
