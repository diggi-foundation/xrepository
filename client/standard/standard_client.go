// Code generated by go-swagger; DO NOT EDIT.

package standard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new standard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for standard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Abbestellen3(params *Abbestellen3Params, opts ...ClientOption) error

	Abonnieren3(params *Abonnieren3Params, opts ...ClientOption) error

	GetAbonnenten3(params *GetAbonnenten3Params, opts ...ClientOption) error

	GetAnfrageToken1(params *GetAnfrageToken1Params, opts ...ClientOption) error

	GetBeziehungen3(params *GetBeziehungen3Params, opts ...ClientOption) (*GetBeziehungen3OK, error)

	GetDebugInfo3(params *GetDebugInfo3Params, opts ...ClientOption) (*GetDebugInfo3OK, error)

	GetDokumentation1(params *GetDokumentation1Params, opts ...ClientOption) error

	GetDokumente3(params *GetDokumente3Params, opts ...ClientOption) error

	GetJSON3(params *GetJSON3Params, opts ...ClientOption) error

	GetModelPlain3(params *GetModelPlain3Params, opts ...ClientOption) error

	GetModel3(params *GetModel3Params, opts ...ClientOption) error

	GetTechnischerBestandteil1(params *GetTechnischerBestandteil1Params, opts ...ClientOption) error

	Metadaten3(params *Metadaten3Params, opts ...ClientOption) error

	RemoveDokument1(params *RemoveDokument1Params, opts ...ClientOption) error

	RemoveTechnischerBestandteil1(params *RemoveTechnischerBestandteil1Params, opts ...ClientOption) error

	SendAnfrage1(params *SendAnfrage1Params, opts ...ClientOption) error

	TransferOwnership3(params *TransferOwnership3Params, opts ...ClientOption) error

	UpdateStatus3(params *UpdateStatus3Params, opts ...ClientOption) error

	Update7(params *Update7Params, opts ...ClientOption) error

	UploadDokument3(params *UploadDokument3Params, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
Abbestellen3 abbestellen 3 API
*/
func (a *Client) Abbestellen3(params *Abbestellen3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbbestellen3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abbestellen_3",
		Method:             "POST",
		PathPattern:        "/standard/{urn}/abbestellen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abbestellen3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Abonnieren3 abonnieren 3 API
*/
func (a *Client) Abonnieren3(params *Abonnieren3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbonnieren3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "abonnieren_3",
		Method:             "POST",
		PathPattern:        "/standard/{urn}/abonnieren",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Abonnieren3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAbonnenten3 get abonnenten 3 API
*/
func (a *Client) GetAbonnenten3(params *GetAbonnenten3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbonnenten3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAbonnenten_3",
		Method:             "GET",
		PathPattern:        "/standard/{urn}/abonnenten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAbonnenten3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAnfrageToken1 erstellts einen token dieser wird zur validierung einer anfrage benötigt
*/
func (a *Client) GetAnfrageToken1(params *GetAnfrageToken1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnfrageToken1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAnfrageToken_1",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}/anfrage/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAnfrageToken1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetBeziehungen3 get beziehungen 3 API
*/
func (a *Client) GetBeziehungen3(params *GetBeziehungen3Params, opts ...ClientOption) (*GetBeziehungen3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBeziehungen3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBeziehungen_3",
		Method:             "GET",
		PathPattern:        "/standard/{urn}/beziehungen",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBeziehungen3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBeziehungen3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBeziehungen_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugInfo3 get debug info 3 API
*/
func (a *Client) GetDebugInfo3(params *GetDebugInfo3Params, opts ...ClientOption) (*GetDebugInfo3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugInfo3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDebugInfo_3",
		Method:             "GET",
		PathPattern:        "/standard/{urn}/debugInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDebugInfo3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugInfo3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDebugInfo_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDokumentation1 lädts ein dokument aus dem bereich dokumentation bei inhalt herunter
*/
func (a *Client) GetDokumentation1(params *GetDokumentation1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumentation1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumentation_1",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}/dokumentation/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumentation1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetDokumente3 lädts alle dokumente des objekts zu der kennung als z IP herunter
*/
func (a *Client) GetDokumente3(params *GetDokumente3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDokumente3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDokumente_3",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}/dokumente",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDokumente3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetJSON3 get Json 3 API
*/
func (a *Client) GetJSON3(params *GetJSON3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJSON3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJson_3",
		Method:             "GET",
		PathPattern:        "/standard/{urn}/model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJSON3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModelPlain3 herunterladens des modells daten dieses objekts
*/
func (a *Client) GetModelPlain3(params *GetModelPlain3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelPlain3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelPlain_3",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelPlain3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetModel3 get model 3 API
*/
func (a *Client) GetModel3(params *GetModel3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModel3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModel_3",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}/model",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModel3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetTechnischerBestandteil1 lädts ein dokument aus dem bereich dokumentation bei inhalt herunter
*/
func (a *Client) GetTechnischerBestandteil1(params *GetTechnischerBestandteil1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTechnischerBestandteil1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTechnischerBestandteil_1",
		Method:             "GET",
		PathPattern:        "/standard/{kennung}/technischerBestandteil/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTechnischerBestandteil1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Metadaten3 metadaten 3 API
*/
func (a *Client) Metadaten3(params *Metadaten3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetadaten3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "metadaten_3",
		Method:             "GET",
		PathPattern:        "/standard/{urn}/metadaten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Metadaten3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveDokument1 entfernts ein dokument aus dem bereich dokumentation
*/
func (a *Client) RemoveDokument1(params *RemoveDokument1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDokument1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDokument_1",
		Method:             "DELETE",
		PathPattern:        "/standard/{urn}/dokumentation/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveDokument1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveTechnischerBestandteil1 entfernts ein dokument aus dem bereich technischer bestandteil
*/
func (a *Client) RemoveTechnischerBestandteil1(params *RemoveTechnischerBestandteil1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTechnischerBestandteil1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTechnischerBestandteil_1",
		Method:             "DELETE",
		PathPattern:        "/standard/{urn}/technischerBestandteil/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveTechnischerBestandteil1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SendAnfrage1 sendets eine nutzeranfrage an den ansprechpartner des inhalts
*/
func (a *Client) SendAnfrage1(params *SendAnfrage1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendAnfrage1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendAnfrage_1",
		Method:             "POST",
		PathPattern:        "/standard/{kennung}/anfrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SendAnfrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
TransferOwnership3 transfer ownership 3 API
*/
func (a *Client) TransferOwnership3(params *TransferOwnership3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnership3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOwnership_3",
		Method:             "POST",
		PathPattern:        "/standard/{urn}/transfer-owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnership3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateStatus3 update status 3 API
*/
func (a *Client) UpdateStatus3(params *UpdateStatus3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatus3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStatus_3",
		Method:             "POST",
		PathPattern:        "/standard/{urn}/updateStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStatus3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Update7 update 7 API
*/
func (a *Client) Update7(params *Update7Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdate7Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_7",
		Method:             "POST",
		PathPattern:        "/standard/{urn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Update7Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UploadDokument3 uploads eines neuen dokuments
*/
func (a *Client) UploadDokument3(params *UploadDokument3Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDokument3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadDokument_3",
		Method:             "POST",
		PathPattern:        "/standard/{urn}/add-document",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadDokument3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
