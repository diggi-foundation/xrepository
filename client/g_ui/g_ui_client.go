// Code generated by go-swagger; DO NOT EDIT.

package g_ui

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new g ui API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for g ui API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateToken(params *CreateTokenParams, opts ...ClientOption) error

	DeleteNutzer(params *DeleteNutzerParams, opts ...ClientOption) error

	GetNutzer(params *GetNutzerParams, opts ...ClientOption) error

	GetNutzerMetadaten(params *GetNutzerMetadatenParams, opts ...ClientOption) error

	RevokeToken(params *RevokeTokenParams, opts ...ClientOption) error

	Search(params *SearchParams, opts ...ClientOption) error

	SearchGET(params *SearchGETParams, opts ...ClientOption) error

	Search1(params *Search1Params, opts ...ClientOption) error

	TransferOwner(params *TransferOwnerParams, opts ...ClientOption) error

	UpdateNutzer(params *UpdateNutzerParams, opts ...ClientOption) error

	UpdatePassword(params *UpdatePasswordParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateToken erzeugts einen neuen API token für den nutzer
*/
func (a *Client) CreateToken(params *CreateTokenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createToken",
		Method:             "PUT",
		PathPattern:        "/nutzer/{kennung}/token/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteNutzer gibts die metadaten des nutzers zurück
*/
func (a *Client) DeleteNutzer(params *DeleteNutzerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNutzerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNutzer",
		Method:             "DELETE",
		PathPattern:        "/nutzer/{kennung}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNutzerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetNutzer gibts die metadaten des nutzers zurück
*/
func (a *Client) GetNutzer(params *GetNutzerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNutzerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNutzer",
		Method:             "GET",
		PathPattern:        "/nutzer/{kennung}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNutzerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetNutzerMetadaten gibts die metadaten des nutzers zurück
*/
func (a *Client) GetNutzerMetadaten(params *GetNutzerMetadatenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNutzerMetadatenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNutzerMetadaten",
		Method:             "GET",
		PathPattern:        "/nutzer/{kennung}/metadaten",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNutzerMetadatenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RevokeToken invalidierts einen API token für den nutzer
*/
func (a *Client) RevokeToken(params *RevokeTokenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeToken",
		Method:             "DELETE",
		PathPattern:        "/nutzer/{kennung}/token/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RevokeTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Search suches filter definiert über ein JSON suchobjekt
*/
func (a *Client) Search(params *SearchParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search",
		Method:             "POST",
		PathPattern:        "/nutzer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SearchGET suches filter definiert über eine URL mit parametern
*/
func (a *Client) SearchGET(params *SearchGETParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchGET",
		Method:             "GET",
		PathPattern:        "/xrepository/suche",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Search1 suches filter definiert über ein JSON suchobjekt
*/
func (a *Client) Search1(params *Search1Params, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearch1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_1",
		Method:             "POST",
		PathPattern:        "/xrepository/suche",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Search1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
TransferOwner überträgts die eigentümerschaft an inhalten an einen neuen nutzer
*/
func (a *Client) TransferOwner(params *TransferOwnerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferOwner",
		Method:             "POST",
		PathPattern:        "/nutzer/{kennung}/transferiereEigentuemer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TransferOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdateNutzer aktualisierts die metadaten des nutzers zurück
*/
func (a *Client) UpdateNutzer(params *UpdateNutzerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNutzerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNutzer",
		Method:             "POST",
		PathPattern:        "/nutzer/{kennung}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateNutzerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
UpdatePassword setzts ein neues passwort für den nutzer
*/
func (a *Client) UpdatePassword(params *UpdatePasswordParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePassword",
		Method:             "POST",
		PathPattern:        "/nutzer/{kennung}/set-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
