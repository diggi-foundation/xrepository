// Code generated by go-swagger; DO NOT EDIT.

package administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new administration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for administration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInfo(params *GetInfoParams, opts ...ClientOption) error

	GetValidierungsBericht(params *GetValidierungsBerichtParams, opts ...ClientOption) error

	Start(params *StartParams, opts ...ClientOption) error

	StarteValidation(params *StarteValidationParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInfo gibts informationen über den aktuellen zuletzt gestartetet lauf der extraktion zurück
*/
func (a *Client) GetInfo(params *GetInfoParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInfo",
		Method:             "GET",
		PathPattern:        "/administration/extraktion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetValidierungsBericht holts den XML validierungsbericht
*/
func (a *Client) GetValidierungsBericht(params *GetValidierungsBerichtParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidierungsBerichtParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidierungsBericht",
		Method:             "GET",
		PathPattern:        "/administration/validation/report.xml",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidierungsBerichtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
Start startets eine erneute extraktion aller objekte
*/
func (a *Client) Start(params *StartParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start",
		Method:             "POST",
		PathPattern:        "/administration/extraktion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
StarteValidation startets eine erneute validierung aller objekte
*/
func (a *Client) StarteValidation(params *StarteValidationParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStarteValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "starteValidation",
		Method:             "POST",
		PathPattern:        "/administration/validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StarteValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
